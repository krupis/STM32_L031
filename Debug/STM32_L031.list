
STM32_L031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003144  08003144  00004144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080031e0  080031e0  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e8  080031e8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e8  080031e8  000041e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031ec  080031ec  000041ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080031f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003258  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003258  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fa1  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001652  00000000  00000000  0000d031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000e688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054b  00000000  00000000  0000ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119ab  00000000  00000000  0000f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009563  00000000  00000000  00020c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068089  00000000  00000000  0002a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00092262  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  000922a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000940a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800312c 	.word	0x0800312c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800312c 	.word	0x0800312c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <__io_putchar+0x20>)
 80004b2:	1d39      	adds	r1, r7, #4
 80004b4:	4805      	ldr	r0, [pc, #20]	@ (80004cc <__io_putchar+0x24>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	f001 fc40 	bl	8001d3c <HAL_UART_Transmit>

  return ch;
 80004bc:	687b      	ldr	r3, [r7, #4]
}
 80004be:	0018      	movs	r0, r3
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	0000ffff 	.word	0x0000ffff
 80004cc:	20000084 	.word	0x20000084

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fa3e 	bl	8000954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f818 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b2 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f880 	bl	80005e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("HAL init complete \n");
 80004e4:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <main+0x34>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fa56 	bl	8002998 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello from infinite loop \n");
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <main+0x38>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 fa52 	bl	8002998 <puts>
	  HAL_Delay(1000);
 80004f4:	23fa      	movs	r3, #250	@ 0xfa
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fa9b 	bl	8000a34 <HAL_Delay>
	  printf("Hello from infinite loop \n");
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	e7f4      	b.n	80004ec <main+0x1c>
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	08003144 	.word	0x08003144
 8000508:	08003158 	.word	0x08003158

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b099      	sub	sp, #100	@ 0x64
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	242c      	movs	r4, #44	@ 0x2c
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2334      	movs	r3, #52	@ 0x34
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f002 fb31 	bl	8002b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	2318      	movs	r3, #24
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	0018      	movs	r0, r3
 8000528:	2314      	movs	r3, #20
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f002 fb29 	bl	8002b84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2318      	movs	r3, #24
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f002 fb22 	bl	8002b84 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	4b26      	ldr	r3, [pc, #152]	@ (80005dc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a26      	ldr	r2, [pc, #152]	@ (80005e0 <SystemClock_Config+0xd4>)
 8000546:	401a      	ands	r2, r3
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <SystemClock_Config+0xd0>)
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	0109      	lsls	r1, r1, #4
 800054e:	430a      	orrs	r2, r1
 8000550:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2210      	movs	r2, #16
 8000558:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2201      	movs	r2, #1
 800055e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	22a0      	movs	r2, #160	@ 0xa0
 800056a:	0212      	lsls	r2, r2, #8
 800056c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	187b      	adds	r3, r7, r1
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fcc0 	bl	8000efc <HAL_RCC_OscConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000580:	f000 f8a4 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	2118      	movs	r1, #24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	220f      	movs	r2, #15
 800058a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 f823 	bl	80015f4 <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005b2:	f000 f88b 	bl	80006cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2202      	movs	r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fa39 	bl	8001a3c <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ce:	f000 f87d 	bl	80006cc <Error_Handler>
  }
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b019      	add	sp, #100	@ 0x64
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <MX_USART2_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005f0:	22e1      	movs	r2, #225	@ 0xe1
 80005f2:	0252      	lsls	r2, r2, #9
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_USART2_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <MX_USART2_UART_Init+0x58>)
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fb33 	bl	8001c94 <HAL_UART_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f84b 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000084 	.word	0x20000084
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	@ 0x24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	240c      	movs	r4, #12
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f002 fa95 	bl	8002b84 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_GPIO_Init+0x80>)
 800065c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_GPIO_Init+0x80>)
 8000660:	2101      	movs	r1, #1
 8000662:	430a      	orrs	r2, r1
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_GPIO_Init+0x80>)
 8000668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066a:	2201      	movs	r2, #1
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_GPIO_Init+0x80>)
 8000674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_GPIO_Init+0x80>)
 8000678:	2102      	movs	r1, #2
 800067a:	430a      	orrs	r2, r1
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_GPIO_Init+0x80>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	2202      	movs	r2, #2
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_GPIO_Init+0x84>)
 800068c:	2200      	movs	r2, #0
 800068e:	2120      	movs	r1, #32
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fc15 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2220      	movs	r2, #32
 800069c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	4a05      	ldr	r2, [pc, #20]	@ (80006c8 <MX_GPIO_Init+0x84>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 fa94 	bl	8000be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b009      	add	sp, #36	@ 0x24
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	50000400 	.word	0x50000400

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	e7fd      	b.n	80006d4 <Error_Handler+0x8>

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <HAL_MspInit+0x24>)
 80006de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x24>)
 80006e2:	2101      	movs	r1, #1
 80006e4:	430a      	orrs	r2, r1
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <HAL_MspInit+0x24>)
 80006ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006ec:	4b03      	ldr	r3, [pc, #12]	@ (80006fc <HAL_MspInit+0x24>)
 80006ee:	2180      	movs	r1, #128	@ 0x80
 80006f0:	0549      	lsls	r1, r1, #21
 80006f2:	430a      	orrs	r2, r1
 80006f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	240c      	movs	r4, #12
 800070a:	193b      	adds	r3, r7, r4
 800070c:	0018      	movs	r0, r3
 800070e:	2314      	movs	r3, #20
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f002 fa36 	bl	8002b84 <memset>
  if(huart->Instance==USART2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <HAL_UART_MspInit+0x80>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d129      	bne.n	8000776 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000728:	2180      	movs	r1, #128	@ 0x80
 800072a:	0289      	lsls	r1, r1, #10
 800072c:	430a      	orrs	r2, r1
 800072e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <HAL_UART_MspInit+0x84>)
 8000736:	2101      	movs	r1, #1
 8000738:	430a      	orrs	r2, r1
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <HAL_UART_MspInit+0x84>)
 800073e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000740:	2201      	movs	r2, #1
 8000742:	4013      	ands	r3, r2
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000748:	0021      	movs	r1, r4
 800074a:	187b      	adds	r3, r7, r1
 800074c:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <HAL_UART_MspInit+0x88>)
 800074e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2202      	movs	r2, #2
 8000754:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2203      	movs	r2, #3
 8000760:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2204      	movs	r2, #4
 8000766:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	187a      	adds	r2, r7, r1
 800076a:	23a0      	movs	r3, #160	@ 0xa0
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fa37 	bl	8000be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b009      	add	sp, #36	@ 0x24
 800077c:	bd90      	pop	{r4, r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	40004400 	.word	0x40004400
 8000784:	40021000 	.word	0x40021000
 8000788:	00008004 	.word	0x00008004

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b4:	f000 f922 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	e00a      	b.n	80007e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d0:	e000      	b.n	80007d4 <_read+0x16>
 80007d2:	bf00      	nop
 80007d4:	0001      	movs	r1, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	b2ca      	uxtb	r2, r1
 80007de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbf0      	blt.n	80007d0 <_read+0x12>
  }

  return len;
 80007ee:	687b      	ldr	r3, [r7, #4]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b006      	add	sp, #24
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	e009      	b.n	800081e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	60ba      	str	r2, [r7, #8]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff fe48 	bl	80004a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	3301      	adds	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	dbf1      	blt.n	800080a <_write+0x12>
  }
  return len;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b006      	add	sp, #24
 800082e:	bd80      	pop	{r7, pc}

08000830 <_close>:

int _close(int file)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000838:	2301      	movs	r3, #1
 800083a:	425b      	negs	r3, r3
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b002      	add	sp, #8
 8000842:	bd80      	pop	{r7, pc}

08000844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2280      	movs	r2, #128	@ 0x80
 8000852:	0192      	lsls	r2, r2, #6
 8000854:	605a      	str	r2, [r3, #4]
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}

08000860 <_isatty>:

int _isatty(int file)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000868:	2301      	movs	r3, #1
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}

08000872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b004      	add	sp, #16
 8000886:	bd80      	pop	{r7, pc}

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f002 f9ba 	bl	8002c30 <__errno>
 80008bc:	0003      	movs	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	425b      	negs	r3, r3
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	18d2      	adds	r2, r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <_sbrk+0x64>)
 80008d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	b006      	add	sp, #24
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20002000 	.word	0x20002000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	2000010c 	.word	0x2000010c
 80008f0:	20000260 	.word	0x20000260

080008f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000902:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000904:	f7ff fff6 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	@ (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	@ (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f002 f985 	bl	8002c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000932:	f7ff fdcd 	bl	80004d0 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
   ldr   r0, =_estack
 8000938:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000944:	080031f0 	.word	0x080031f0
  ldr r2, =_sbss
 8000948:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800094c:	20000260 	.word	0x20000260

08000950 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_COMP_IRQHandler>
	...

08000954 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <HAL_Init+0x3c>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_Init+0x3c>)
 8000966:	2140      	movs	r1, #64	@ 0x40
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f811 	bl	8000994 <HAL_InitTick>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d003      	beq.n	800097e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	e001      	b.n	8000982 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097e:	f7ff feab 	bl	80006d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
}
 8000986:	0018      	movs	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	b002      	add	sp, #8
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <HAL_InitTick+0x5c>)
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <HAL_InitTick+0x60>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	0019      	movs	r1, r3
 80009a6:	23fa      	movs	r3, #250	@ 0xfa
 80009a8:	0098      	lsls	r0, r3, #2
 80009aa:	f7ff fbad 	bl	8000108 <__udivsi3>
 80009ae:	0003      	movs	r3, r0
 80009b0:	0019      	movs	r1, r3
 80009b2:	0020      	movs	r0, r4
 80009b4:	f7ff fba8 	bl	8000108 <__udivsi3>
 80009b8:	0003      	movs	r3, r0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f905 	bl	8000bca <HAL_SYSTICK_Config>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e00f      	b.n	80009e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d80b      	bhi.n	80009e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	2301      	movs	r3, #1
 80009d2:	425b      	negs	r3, r3
 80009d4:	2200      	movs	r2, #0
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f8e2 	bl	8000ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_InitTick+0x64>)
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b003      	add	sp, #12
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000004 	.word	0x20000004

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_IncTick+0x1c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	001a      	movs	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	18d2      	adds	r2, r2, r3
 8000a0c:	4b03      	ldr	r3, [pc, #12]	@ (8000a1c <HAL_IncTick+0x20>)
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000110 	.word	0x20000110

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <HAL_GetTick+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	0018      	movs	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	20000110 	.word	0x20000110

08000a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a3c:	f7ff fff0 	bl	8000a20 <HAL_GetTick>
 8000a40:	0003      	movs	r3, r0
 8000a42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	d005      	beq.n	8000a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_Delay+0x44>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	001a      	movs	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	189b      	adds	r3, r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	f7ff ffe0 	bl	8000a20 <HAL_GetTick>
 8000a60:	0002      	movs	r2, r0
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <HAL_Delay+0x28>
  {
  }
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			@ (mov r8, r8)
 8000a78:	20000008 	.word	0x20000008

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	@ (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	@ 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	@ 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	@ 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	@ (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	@ 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	@ 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	@ 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	045b      	lsls	r3, r3, #17
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d301      	bcc.n	8000b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <SysTick_Config+0x44>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7c 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <SysTick_Config+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <SysTick_Config+0x44>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff ffbf 	bl	8000b58 <SysTick_Config>
 8000bda:	0003      	movs	r3, r0
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bfa:	e149      	b.n	8000e90 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2101      	movs	r1, #1
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <HAL_GPIO_Init+0x30>
 8000c12:	e13a      	b.n	8000e8a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d005      	beq.n	8000c2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2203      	movs	r2, #3
 8000c26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
 8000c68:	0013      	movs	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2203      	movs	r2, #3
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d017      	beq.n	8000cca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	0013      	movs	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d123      	bne.n	8000d1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	58d3      	ldr	r3, [r2, r3]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	4013      	ands	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691a      	ldr	r2, [r3, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2107      	movs	r1, #7
 8000d02:	400b      	ands	r3, r1
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	409a      	lsls	r2, r3
 8000d2c:	0013      	movs	r3, r2
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	23c0      	movs	r3, #192	@ 0xc0
 8000d58:	029b      	lsls	r3, r3, #10
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	d100      	bne.n	8000d60 <HAL_GPIO_Init+0x17c>
 8000d5e:	e094      	b.n	8000e8a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d60:	4b51      	ldr	r3, [pc, #324]	@ (8000ea8 <HAL_GPIO_Init+0x2c4>)
 8000d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d64:	4b50      	ldr	r3, [pc, #320]	@ (8000ea8 <HAL_GPIO_Init+0x2c4>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6c:	4a4f      	ldr	r2, [pc, #316]	@ (8000eac <HAL_GPIO_Init+0x2c8>)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	589b      	ldr	r3, [r3, r2]
 8000d78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	220f      	movs	r2, #15
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	23a0      	movs	r3, #160	@ 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x1de>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a44      	ldr	r2, [pc, #272]	@ (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x1da>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a43      	ldr	r2, [pc, #268]	@ (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x1d6>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a42      	ldr	r2, [pc, #264]	@ (8000eb8 <HAL_GPIO_Init+0x2d4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x1d2>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e004      	b.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e002      	b.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dd4:	4935      	ldr	r1, [pc, #212]	@ (8000eac <HAL_GPIO_Init+0x2c8>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000de2:	4b36      	ldr	r3, [pc, #216]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43da      	mvns	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	035b      	lsls	r3, r3, #13
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e06:	4b2d      	ldr	r3, [pc, #180]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43da      	mvns	r2, r3
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	039b      	lsls	r3, r3, #14
 8000e24:	4013      	ands	r3, r2
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	029b      	lsls	r3, r3, #10
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HAL_GPIO_Init+0x2d8>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	40da      	lsrs	r2, r3
 8000e98:	1e13      	subs	r3, r2, #0
 8000e9a:	d000      	beq.n	8000e9e <HAL_GPIO_Init+0x2ba>
 8000e9c:	e6ae      	b.n	8000bfc <HAL_GPIO_Init+0x18>
  }
}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b006      	add	sp, #24
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	50000400 	.word	0x50000400
 8000eb4:	50000800 	.word	0x50000800
 8000eb8:	50001c00 	.word	0x50001c00
 8000ebc:	40010400 	.word	0x40010400

08000ec0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	0008      	movs	r0, r1
 8000eca:	0011      	movs	r1, r2
 8000ecc:	1cbb      	adds	r3, r7, #2
 8000ece:	1c02      	adds	r2, r0, #0
 8000ed0:	801a      	strh	r2, [r3, #0]
 8000ed2:	1c7b      	adds	r3, r7, #1
 8000ed4:	1c0a      	adds	r2, r1, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed8:	1c7b      	adds	r3, r7, #1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	881a      	ldrh	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ee8:	e003      	b.n	8000ef2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000eea:	1cbb      	adds	r3, r7, #2
 8000eec:	881a      	ldrh	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d102      	bne.n	8000f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f000 fb6c 	bl	80015e8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f10:	4bc8      	ldr	r3, [pc, #800]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	220c      	movs	r2, #12
 8000f16:	4013      	ands	r3, r2
 8000f18:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f1a:	4bc6      	ldr	r3, [pc, #792]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	2380      	movs	r3, #128	@ 0x80
 8000f20:	025b      	lsls	r3, r3, #9
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d100      	bne.n	8000f32 <HAL_RCC_OscConfig+0x36>
 8000f30:	e07d      	b.n	800102e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d007      	beq.n	8000f48 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b0c      	cmp	r3, #12
 8000f3c:	d112      	bne.n	8000f64 <HAL_RCC_OscConfig+0x68>
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	2380      	movs	r3, #128	@ 0x80
 8000f42:	025b      	lsls	r3, r3, #9
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d10d      	bne.n	8000f64 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	4bba      	ldr	r3, [pc, #744]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	029b      	lsls	r3, r3, #10
 8000f50:	4013      	ands	r3, r2
 8000f52:	d100      	bne.n	8000f56 <HAL_RCC_OscConfig+0x5a>
 8000f54:	e06a      	b.n	800102c <HAL_RCC_OscConfig+0x130>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d166      	bne.n	800102c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f000 fb42 	bl	80015e8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	025b      	lsls	r3, r3, #9
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d107      	bne.n	8000f80 <HAL_RCC_OscConfig+0x84>
 8000f70:	4bb0      	ldr	r3, [pc, #704]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4baf      	ldr	r3, [pc, #700]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	0249      	lsls	r1, r1, #9
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e027      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	23a0      	movs	r3, #160	@ 0xa0
 8000f86:	02db      	lsls	r3, r3, #11
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d10e      	bne.n	8000faa <HAL_RCC_OscConfig+0xae>
 8000f8c:	4ba9      	ldr	r3, [pc, #676]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4ba8      	ldr	r3, [pc, #672]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f92:	2180      	movs	r1, #128	@ 0x80
 8000f94:	02c9      	lsls	r1, r1, #11
 8000f96:	430a      	orrs	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	4ba6      	ldr	r3, [pc, #664]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4ba5      	ldr	r3, [pc, #660]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000fa0:	2180      	movs	r1, #128	@ 0x80
 8000fa2:	0249      	lsls	r1, r1, #9
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	e012      	b.n	8000fd0 <HAL_RCC_OscConfig+0xd4>
 8000faa:	4ba2      	ldr	r3, [pc, #648]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4ba1      	ldr	r3, [pc, #644]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000fb0:	49a1      	ldr	r1, [pc, #644]	@ (8001238 <HAL_RCC_OscConfig+0x33c>)
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	4b9f      	ldr	r3, [pc, #636]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	@ 0x80
 8000fbc:	025b      	lsls	r3, r3, #9
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4b9b      	ldr	r3, [pc, #620]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b9a      	ldr	r3, [pc, #616]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000fca:	499c      	ldr	r1, [pc, #624]	@ (800123c <HAL_RCC_OscConfig+0x340>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d014      	beq.n	8001002 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fd22 	bl	8000a20 <HAL_GetTick>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fd1d 	bl	8000a20 <HAL_GetTick>
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	@ 0x64
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e2f9      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ff4:	4b8f      	ldr	r3, [pc, #572]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	2380      	movs	r3, #128	@ 0x80
 8000ffa:	029b      	lsls	r3, r3, #10
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0xe6>
 8001000:	e015      	b.n	800102e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001002:	f7ff fd0d 	bl	8000a20 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fd08 	bl	8000a20 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	@ 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e2e4      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800101e:	4b85      	ldr	r3, [pc, #532]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x110>
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2202      	movs	r2, #2
 8001034:	4013      	ands	r3, r2
 8001036:	d100      	bne.n	800103a <HAL_RCC_OscConfig+0x13e>
 8001038:	e099      	b.n	800116e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	2220      	movs	r2, #32
 8001044:	4013      	ands	r3, r2
 8001046:	d009      	beq.n	800105c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001048:	4b7a      	ldr	r3, [pc, #488]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b79      	ldr	r3, [pc, #484]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800104e:	2120      	movs	r1, #32
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	2220      	movs	r2, #32
 8001058:	4393      	bics	r3, r2
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b04      	cmp	r3, #4
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d13e      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1ea>
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d13b      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800106e:	4b71      	ldr	r3, [pc, #452]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2204      	movs	r2, #4
 8001074:	4013      	ands	r3, r2
 8001076:	d004      	beq.n	8001082 <HAL_RCC_OscConfig+0x186>
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e2b2      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001082:	4b6c      	ldr	r3, [pc, #432]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4a6e      	ldr	r2, [pc, #440]	@ (8001240 <HAL_RCC_OscConfig+0x344>)
 8001088:	4013      	ands	r3, r2
 800108a:	0019      	movs	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	021a      	lsls	r2, r3, #8
 8001092:	4b68      	ldr	r3, [pc, #416]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001094:	430a      	orrs	r2, r1
 8001096:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001098:	4b66      	ldr	r3, [pc, #408]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2209      	movs	r2, #9
 800109e:	4393      	bics	r3, r2
 80010a0:	0019      	movs	r1, r3
 80010a2:	4b64      	ldr	r3, [pc, #400]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80010a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010aa:	f000 fbeb 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 80010ae:	0001      	movs	r1, r0
 80010b0:	4b60      	ldr	r3, [pc, #384]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	220f      	movs	r2, #15
 80010b8:	4013      	ands	r3, r2
 80010ba:	4a62      	ldr	r2, [pc, #392]	@ (8001244 <HAL_RCC_OscConfig+0x348>)
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	000a      	movs	r2, r1
 80010c0:	40da      	lsrs	r2, r3
 80010c2:	4b61      	ldr	r3, [pc, #388]	@ (8001248 <HAL_RCC_OscConfig+0x34c>)
 80010c4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010c6:	4b61      	ldr	r3, [pc, #388]	@ (800124c <HAL_RCC_OscConfig+0x350>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2513      	movs	r5, #19
 80010cc:	197c      	adds	r4, r7, r5
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fc60 	bl	8000994 <HAL_InitTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010d8:	197b      	adds	r3, r7, r5
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d046      	beq.n	800116e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80010e0:	197b      	adds	r3, r7, r5
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	e280      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d027      	beq.n	800113c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010ec:	4b51      	ldr	r3, [pc, #324]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2209      	movs	r2, #9
 80010f2:	4393      	bics	r3, r2
 80010f4:	0019      	movs	r1, r3
 80010f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80010f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fc8f 	bl	8000a20 <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fc8a 	bl	8000a20 <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e266      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800111a:	4b46      	ldr	r3, [pc, #280]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2204      	movs	r2, #4
 8001120:	4013      	ands	r3, r2
 8001122:	d0f1      	beq.n	8001108 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a45      	ldr	r2, [pc, #276]	@ (8001240 <HAL_RCC_OscConfig+0x344>)
 800112a:	4013      	ands	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	021a      	lsls	r2, r3, #8
 8001134:	4b3f      	ldr	r3, [pc, #252]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	e018      	b.n	800116e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113c:	4b3d      	ldr	r3, [pc, #244]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b3c      	ldr	r3, [pc, #240]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001142:	2101      	movs	r1, #1
 8001144:	438a      	bics	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc6a 	bl	8000a20 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001152:	f7ff fc65 	bl	8000a20 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e241      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2204      	movs	r2, #4
 800116a:	4013      	ands	r3, r2
 800116c:	d1f1      	bne.n	8001152 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2210      	movs	r2, #16
 8001174:	4013      	ands	r3, r2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x27e>
 8001178:	e0a1      	b.n	80012be <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d140      	bne.n	8001202 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001180:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d005      	beq.n	8001198 <HAL_RCC_OscConfig+0x29c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e227      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <HAL_RCC_OscConfig+0x354>)
 800119e:	4013      	ands	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1a      	ldr	r2, [r3, #32]
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80011a8:	430a      	orrs	r2, r1
 80011aa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ac:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	0a19      	lsrs	r1, r3, #8
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	061a      	lsls	r2, r3, #24
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80011bc:	430a      	orrs	r2, r1
 80011be:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	0b5b      	lsrs	r3, r3, #13
 80011c6:	3301      	adds	r3, #1
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	0212      	lsls	r2, r2, #8
 80011cc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	210f      	movs	r1, #15
 80011d6:	400b      	ands	r3, r1
 80011d8:	491a      	ldr	r1, [pc, #104]	@ (8001244 <HAL_RCC_OscConfig+0x348>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_RCC_OscConfig+0x34c>)
 80011e0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <HAL_RCC_OscConfig+0x350>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2513      	movs	r5, #19
 80011e8:	197c      	adds	r4, r7, r5
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fbd2 	bl	8000994 <HAL_InitTick>
 80011f0:	0003      	movs	r3, r0
 80011f2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011f4:	197b      	adds	r3, r7, r5
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d060      	beq.n	80012be <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80011fc:	197b      	adds	r3, r7, r5
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	e1f2      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d03f      	beq.n	800128a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <HAL_RCC_OscConfig+0x338>)
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0049      	lsls	r1, r1, #1
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc02 	bl	8000a20 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001220:	e018      	b.n	8001254 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001222:	f7ff fbfd 	bl	8000a20 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d911      	bls.n	8001254 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1d9      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
 8001234:	40021000 	.word	0x40021000
 8001238:	fffeffff 	.word	0xfffeffff
 800123c:	fffbffff 	.word	0xfffbffff
 8001240:	ffffe0ff 	.word	0xffffe0ff
 8001244:	08003174 	.word	0x08003174
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004
 8001250:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001254:	4bc9      	ldr	r3, [pc, #804]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d0e0      	beq.n	8001222 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001260:	4bc6      	ldr	r3, [pc, #792]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4ac6      	ldr	r2, [pc, #792]	@ (8001580 <HAL_RCC_OscConfig+0x684>)
 8001266:	4013      	ands	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a1a      	ldr	r2, [r3, #32]
 800126e:	4bc3      	ldr	r3, [pc, #780]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001270:	430a      	orrs	r2, r1
 8001272:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001274:	4bc1      	ldr	r3, [pc, #772]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	0a19      	lsrs	r1, r3, #8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	061a      	lsls	r2, r3, #24
 8001282:	4bbe      	ldr	r3, [pc, #760]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	e019      	b.n	80012be <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800128a:	4bbc      	ldr	r3, [pc, #752]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4bbb      	ldr	r3, [pc, #748]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001290:	49bc      	ldr	r1, [pc, #752]	@ (8001584 <HAL_RCC_OscConfig+0x688>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fbc3 	bl	8000a20 <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a0:	f7ff fbbe 	bl	8000a20 <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e19a      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b2:	4bb2      	ldr	r3, [pc, #712]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2208      	movs	r2, #8
 80012c4:	4013      	ands	r3, r2
 80012c6:	d036      	beq.n	8001336 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d019      	beq.n	8001304 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d0:	4baa      	ldr	r3, [pc, #680]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80012d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012d4:	4ba9      	ldr	r3, [pc, #676]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fba0 	bl	8000a20 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fb9b 	bl	8000a20 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e177      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f8:	4ba0      	ldr	r3, [pc, #640]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80012fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f1      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3ea>
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001304:	4b9d      	ldr	r3, [pc, #628]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001306:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001308:	4b9c      	ldr	r3, [pc, #624]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff fb86 	bl	8000a20 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fb81 	bl	8000a20 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e15d      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800132c:	4b93      	ldr	r3, [pc, #588]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800132e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d1f1      	bne.n	800131a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2204      	movs	r2, #4
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x446>
 8001340:	e0ae      	b.n	80014a0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2023      	movs	r0, #35	@ 0x23
 8001344:	183b      	adds	r3, r7, r0
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134a:	4b8c      	ldr	r3, [pc, #560]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800134c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	055b      	lsls	r3, r3, #21
 8001352:	4013      	ands	r3, r2
 8001354:	d109      	bne.n	800136a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b89      	ldr	r3, [pc, #548]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800135a:	4b88      	ldr	r3, [pc, #544]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800135c:	2180      	movs	r1, #128	@ 0x80
 800135e:	0549      	lsls	r1, r1, #21
 8001360:	430a      	orrs	r2, r1
 8001362:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001364:	183b      	adds	r3, r7, r0
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b87      	ldr	r3, [pc, #540]	@ (8001588 <HAL_RCC_OscConfig+0x68c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4013      	ands	r3, r2
 8001374:	d11a      	bne.n	80013ac <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b84      	ldr	r3, [pc, #528]	@ (8001588 <HAL_RCC_OscConfig+0x68c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b83      	ldr	r3, [pc, #524]	@ (8001588 <HAL_RCC_OscConfig+0x68c>)
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	0049      	lsls	r1, r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001384:	f7ff fb4c 	bl	8000a20 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138e:	f7ff fb47 	bl	8000a20 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b64      	cmp	r3, #100	@ 0x64
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e123      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	4b79      	ldr	r3, [pc, #484]	@ (8001588 <HAL_RCC_OscConfig+0x68c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	2380      	movs	r3, #128	@ 0x80
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d107      	bne.n	80013c8 <HAL_RCC_OscConfig+0x4cc>
 80013b8:	4b70      	ldr	r3, [pc, #448]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013bc:	4b6f      	ldr	r3, [pc, #444]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013be:	2180      	movs	r1, #128	@ 0x80
 80013c0:	0049      	lsls	r1, r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80013c6:	e031      	b.n	800142c <HAL_RCC_OscConfig+0x530>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10c      	bne.n	80013ea <HAL_RCC_OscConfig+0x4ee>
 80013d0:	4b6a      	ldr	r3, [pc, #424]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013d4:	4b69      	ldr	r3, [pc, #420]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013d6:	496b      	ldr	r1, [pc, #428]	@ (8001584 <HAL_RCC_OscConfig+0x688>)
 80013d8:	400a      	ands	r2, r1
 80013da:	651a      	str	r2, [r3, #80]	@ 0x50
 80013dc:	4b67      	ldr	r3, [pc, #412]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013e0:	4b66      	ldr	r3, [pc, #408]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013e2:	496a      	ldr	r1, [pc, #424]	@ (800158c <HAL_RCC_OscConfig+0x690>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80013e8:	e020      	b.n	800142c <HAL_RCC_OscConfig+0x530>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	23a0      	movs	r3, #160	@ 0xa0
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d10e      	bne.n	8001414 <HAL_RCC_OscConfig+0x518>
 80013f6:	4b61      	ldr	r3, [pc, #388]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013fa:	4b60      	ldr	r3, [pc, #384]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	00c9      	lsls	r1, r1, #3
 8001400:	430a      	orrs	r2, r1
 8001402:	651a      	str	r2, [r3, #80]	@ 0x50
 8001404:	4b5d      	ldr	r3, [pc, #372]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001406:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001408:	4b5c      	ldr	r3, [pc, #368]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800140a:	2180      	movs	r1, #128	@ 0x80
 800140c:	0049      	lsls	r1, r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	651a      	str	r2, [r3, #80]	@ 0x50
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0x530>
 8001414:	4b59      	ldr	r3, [pc, #356]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001418:	4b58      	ldr	r3, [pc, #352]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800141a:	495a      	ldr	r1, [pc, #360]	@ (8001584 <HAL_RCC_OscConfig+0x688>)
 800141c:	400a      	ands	r2, r1
 800141e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001420:	4b56      	ldr	r3, [pc, #344]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001424:	4b55      	ldr	r3, [pc, #340]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001426:	4959      	ldr	r1, [pc, #356]	@ (800158c <HAL_RCC_OscConfig+0x690>)
 8001428:	400a      	ands	r2, r1
 800142a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d015      	beq.n	8001460 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff faf4 	bl	8000a20 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800143c:	e009      	b.n	8001452 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff faef 	bl	8000a20 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	4a51      	ldr	r2, [pc, #324]	@ (8001590 <HAL_RCC_OscConfig+0x694>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e0ca      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001452:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001456:	2380      	movs	r3, #128	@ 0x80
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4013      	ands	r3, r2
 800145c:	d0ef      	beq.n	800143e <HAL_RCC_OscConfig+0x542>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fade 	bl	8000a20 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001468:	e009      	b.n	800147e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fad9 	bl	8000a20 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4a46      	ldr	r2, [pc, #280]	@ (8001590 <HAL_RCC_OscConfig+0x694>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0b4      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d1ef      	bne.n	800146a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800148a:	2323      	movs	r3, #35	@ 0x23
 800148c:	18fb      	adds	r3, r7, r3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001494:	4b39      	ldr	r3, [pc, #228]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001498:	4b38      	ldr	r3, [pc, #224]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800149a:	493e      	ldr	r1, [pc, #248]	@ (8001594 <HAL_RCC_OscConfig+0x698>)
 800149c:	400a      	ands	r2, r1
 800149e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d100      	bne.n	80014aa <HAL_RCC_OscConfig+0x5ae>
 80014a8:	e09d      	b.n	80015e6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d100      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5b6>
 80014b0:	e076      	b.n	80015a0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d145      	bne.n	8001546 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b30      	ldr	r3, [pc, #192]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80014c0:	4935      	ldr	r1, [pc, #212]	@ (8001598 <HAL_RCC_OscConfig+0x69c>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff faab 	bl	8000a20 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff faa6 	bl	8000a20 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e082      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	@ 0x80
 80014e8:	049b      	lsls	r3, r3, #18
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ee:	4b23      	ldr	r3, [pc, #140]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	4a2a      	ldr	r2, [pc, #168]	@ (800159c <HAL_RCC_OscConfig+0x6a0>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	0019      	movs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	431a      	orrs	r2, r3
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800150a:	430a      	orrs	r2, r1
 800150c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001514:	2180      	movs	r1, #128	@ 0x80
 8001516:	0449      	lsls	r1, r1, #17
 8001518:	430a      	orrs	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fa80 	bl	8000a20 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fa7b 	bl	8000a20 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e057      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	049b      	lsls	r3, r3, #18
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x62a>
 8001544:	e04f      	b.n	80015e6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 800154c:	4912      	ldr	r1, [pc, #72]	@ (8001598 <HAL_RCC_OscConfig+0x69c>)
 800154e:	400a      	ands	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fa65 	bl	8000a20 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fa60 	bl	8000a20 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e03c      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800156e:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_RCC_OscConfig+0x680>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	049b      	lsls	r3, r3, #18
 8001576:	4013      	ands	r3, r2
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x660>
 800157a:	e034      	b.n	80015e6 <HAL_RCC_OscConfig+0x6ea>
 800157c:	40021000 	.word	0x40021000
 8001580:	ffff1fff 	.word	0xffff1fff
 8001584:	fffffeff 	.word	0xfffffeff
 8001588:	40007000 	.word	0x40007000
 800158c:	fffffbff 	.word	0xfffffbff
 8001590:	00001388 	.word	0x00001388
 8001594:	efffffff 	.word	0xefffffff
 8001598:	feffffff 	.word	0xfeffffff
 800159c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_RCC_OscConfig+0x6f4>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	401a      	ands	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015be:	429a      	cmp	r2, r3
 80015c0:	d10f      	bne.n	80015e2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	23f0      	movs	r3, #240	@ 0xf0
 80015c6:	039b      	lsls	r3, r3, #14
 80015c8:	401a      	ands	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	23c0      	movs	r3, #192	@ 0xc0
 80015d6:	041b      	lsls	r3, r3, #16
 80015d8:	401a      	ands	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b00a      	add	sp, #40	@ 0x28
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e128      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b96      	ldr	r3, [pc, #600]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2201      	movs	r2, #1
 800160e:	4013      	ands	r3, r2
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d91e      	bls.n	8001654 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b93      	ldr	r3, [pc, #588]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2201      	movs	r2, #1
 800161c:	4393      	bics	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	4b90      	ldr	r3, [pc, #576]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001628:	f7ff f9fa 	bl	8000a20 <HAL_GetTick>
 800162c:	0003      	movs	r3, r0
 800162e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001630:	e009      	b.n	8001646 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001632:	f7ff f9f5 	bl	8000a20 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4a8a      	ldr	r2, [pc, #552]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e109      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001646:	4b87      	ldr	r3, [pc, #540]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d1ee      	bne.n	8001632 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d009      	beq.n	8001672 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165e:	4b83      	ldr	r3, [pc, #524]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	22f0      	movs	r2, #240	@ 0xf0
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	4b7f      	ldr	r3, [pc, #508]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 800166e:	430a      	orrs	r2, r1
 8001670:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d100      	bne.n	800167e <HAL_RCC_ClockConfig+0x8a>
 800167c:	e089      	b.n	8001792 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001686:	4b79      	ldr	r3, [pc, #484]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	029b      	lsls	r3, r3, #10
 800168e:	4013      	ands	r3, r2
 8001690:	d120      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0e1      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800169e:	4b73      	ldr	r3, [pc, #460]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	049b      	lsls	r3, r3, #18
 80016a6:	4013      	ands	r3, r2
 80016a8:	d114      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0d5      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b6:	4b6d      	ldr	r3, [pc, #436]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2204      	movs	r2, #4
 80016bc:	4013      	ands	r3, r2
 80016be:	d109      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0ca      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016c4:	4b69      	ldr	r3, [pc, #420]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4013      	ands	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0c2      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d4:	4b65      	ldr	r3, [pc, #404]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	2203      	movs	r2, #3
 80016da:	4393      	bics	r3, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	4b62      	ldr	r3, [pc, #392]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff f99a 	bl	8000a20 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d111      	bne.n	800171c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f8:	e009      	b.n	800170e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fa:	f7ff f991 	bl	8000a20 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a58      	ldr	r2, [pc, #352]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0a5      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800170e:	4b57      	ldr	r3, [pc, #348]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	220c      	movs	r2, #12
 8001714:	4013      	ands	r3, r2
 8001716:	2b08      	cmp	r3, #8
 8001718:	d1ef      	bne.n	80016fa <HAL_RCC_ClockConfig+0x106>
 800171a:	e03a      	b.n	8001792 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d111      	bne.n	8001748 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001724:	e009      	b.n	800173a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001726:	f7ff f97b 	bl	8000a20 <HAL_GetTick>
 800172a:	0002      	movs	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	4a4d      	ldr	r2, [pc, #308]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e08f      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173a:	4b4c      	ldr	r3, [pc, #304]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	220c      	movs	r2, #12
 8001740:	4013      	ands	r3, r2
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d1ef      	bne.n	8001726 <HAL_RCC_ClockConfig+0x132>
 8001746:	e024      	b.n	8001792 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d11b      	bne.n	8001788 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001750:	e009      	b.n	8001766 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001752:	f7ff f965 	bl	8000a20 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4a42      	ldr	r2, [pc, #264]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e079      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	220c      	movs	r2, #12
 800176c:	4013      	ands	r3, r2
 800176e:	2b04      	cmp	r3, #4
 8001770:	d1ef      	bne.n	8001752 <HAL_RCC_ClockConfig+0x15e>
 8001772:	e00e      	b.n	8001792 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff f954 	bl	8000a20 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a3a      	ldr	r2, [pc, #232]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e068      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001788:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001792:	4b34      	ldr	r3, [pc, #208]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d21e      	bcs.n	80017de <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a0:	4b30      	ldr	r3, [pc, #192]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4393      	bics	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017b2:	f7ff f935 	bl	8000a20 <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	e009      	b.n	80017d0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f930 	bl	8000a20 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	4a28      	ldr	r2, [pc, #160]	@ (8001868 <HAL_RCC_ClockConfig+0x274>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e044      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_RCC_ClockConfig+0x270>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d1ee      	bne.n	80017bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2204      	movs	r2, #4
 80017e4:	4013      	ands	r3, r2
 80017e6:	d009      	beq.n	80017fc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e8:	4b20      	ldr	r3, [pc, #128]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a20      	ldr	r2, [pc, #128]	@ (8001870 <HAL_RCC_ClockConfig+0x27c>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2208      	movs	r2, #8
 8001802:	4013      	ands	r3, r2
 8001804:	d00a      	beq.n	800181c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001806:	4b19      	ldr	r3, [pc, #100]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4a1a      	ldr	r2, [pc, #104]	@ (8001874 <HAL_RCC_ClockConfig+0x280>)
 800180c:	4013      	ands	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	00da      	lsls	r2, r3, #3
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800181c:	f000 f832 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001820:	0001      	movs	r1, r0
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_RCC_ClockConfig+0x278>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	220f      	movs	r2, #15
 800182a:	4013      	ands	r3, r2
 800182c:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <HAL_RCC_ClockConfig+0x284>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	000a      	movs	r2, r1
 8001832:	40da      	lsrs	r2, r3
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_RCC_ClockConfig+0x288>)
 8001836:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <HAL_RCC_ClockConfig+0x28c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	250b      	movs	r5, #11
 800183e:	197c      	adds	r4, r7, r5
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff f8a7 	bl	8000994 <HAL_InitTick>
 8001846:	0003      	movs	r3, r0
 8001848:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800184a:	197b      	adds	r3, r7, r5
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001852:	197b      	adds	r3, r7, r5
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	e000      	b.n	800185a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b004      	add	sp, #16
 8001860:	bdb0      	pop	{r4, r5, r7, pc}
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	40022000 	.word	0x40022000
 8001868:	00001388 	.word	0x00001388
 800186c:	40021000 	.word	0x40021000
 8001870:	fffff8ff 	.word	0xfffff8ff
 8001874:	ffffc7ff 	.word	0xffffc7ff
 8001878:	08003174 	.word	0x08003174
 800187c:	20000000 	.word	0x20000000
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	b5b0      	push	{r4, r5, r7, lr}
 8001886:	b08e      	sub	sp, #56	@ 0x38
 8001888:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800188a:	4b4c      	ldr	r3, [pc, #304]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x138>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001892:	230c      	movs	r3, #12
 8001894:	4013      	ands	r3, r2
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d014      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x40>
 800189a:	d900      	bls.n	800189e <HAL_RCC_GetSysClockFreq+0x1a>
 800189c:	e07b      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x112>
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x24>
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	d00b      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x3a>
 80018a6:	e076      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018a8:	4b44      	ldr	r3, [pc, #272]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x138>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	4013      	ands	r3, r2
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018b2:	4b43      	ldr	r3, [pc, #268]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018b6:	e07c      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018b8:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x140>)
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018bc:	e079      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018be:	4b42      	ldr	r3, [pc, #264]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018c2:	e076      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	0c9a      	lsrs	r2, r3, #18
 80018c8:	230f      	movs	r3, #15
 80018ca:	401a      	ands	r2, r3
 80018cc:	4b3f      	ldr	r3, [pc, #252]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x148>)
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d4:	0d9a      	lsrs	r2, r3, #22
 80018d6:	2303      	movs	r3, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	3301      	adds	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x138>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	4013      	ands	r3, r2
 80018e8:	d01a      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	4a35      	ldr	r2, [pc, #212]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x144>)
 80018f4:	2300      	movs	r3, #0
 80018f6:	69b8      	ldr	r0, [r7, #24]
 80018f8:	69f9      	ldr	r1, [r7, #28]
 80018fa:	f7fe fcb1 	bl	8000260 <__aeabi_lmul>
 80018fe:	0002      	movs	r2, r0
 8001900:	000b      	movs	r3, r1
 8001902:	0010      	movs	r0, r2
 8001904:	0019      	movs	r1, r3
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f7fe fc85 	bl	8000220 <__aeabi_uldivmod>
 8001916:	0002      	movs	r2, r0
 8001918:	000b      	movs	r3, r1
 800191a:	0013      	movs	r3, r2
 800191c:	637b      	str	r3, [r7, #52]	@ 0x34
 800191e:	e037      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001920:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x138>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	4013      	ands	r3, r2
 8001928:	d01a      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4a23      	ldr	r2, [pc, #140]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001934:	2300      	movs	r3, #0
 8001936:	68b8      	ldr	r0, [r7, #8]
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	f7fe fc91 	bl	8000260 <__aeabi_lmul>
 800193e:	0002      	movs	r2, r0
 8001940:	000b      	movs	r3, r1
 8001942:	0010      	movs	r0, r2
 8001944:	0019      	movs	r1, r3
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f7fe fc65 	bl	8000220 <__aeabi_uldivmod>
 8001956:	0002      	movs	r2, r0
 8001958:	000b      	movs	r3, r1
 800195a:	0013      	movs	r3, r2
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
 800195e:	e017      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001962:	0018      	movs	r0, r3
 8001964:	2300      	movs	r3, #0
 8001966:	0019      	movs	r1, r3
 8001968:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x140>)
 800196a:	2300      	movs	r3, #0
 800196c:	f7fe fc78 	bl	8000260 <__aeabi_lmul>
 8001970:	0002      	movs	r2, r0
 8001972:	000b      	movs	r3, r1
 8001974:	0010      	movs	r0, r2
 8001976:	0019      	movs	r1, r3
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	001c      	movs	r4, r3
 800197c:	2300      	movs	r3, #0
 800197e:	001d      	movs	r5, r3
 8001980:	0022      	movs	r2, r4
 8001982:	002b      	movs	r3, r5
 8001984:	f7fe fc4c 	bl	8000220 <__aeabi_uldivmod>
 8001988:	0002      	movs	r2, r0
 800198a:	000b      	movs	r3, r1
 800198c:	0013      	movs	r3, r2
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001994:	e00d      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x138>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	3301      	adds	r3, #1
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	0212      	lsls	r2, r2, #8
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b00e      	add	sp, #56	@ 0x38
 80019ba:	bdb0      	pop	{r4, r5, r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	003d0900 	.word	0x003d0900
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200
 80019cc:	0800318c 	.word	0x0800318c

080019d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff2 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019ec:	0001      	movs	r1, r0
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	2207      	movs	r2, #7
 80019f6:	4013      	ands	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	40d9      	lsrs	r1, r3
 80019fe:	000b      	movs	r3, r1
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08003184 	.word	0x08003184

08001a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a14:	f7ff ffdc 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	0adb      	lsrs	r3, r3, #11
 8001a20:	2207      	movs	r2, #7
 8001a22:	4013      	ands	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	40d9      	lsrs	r1, r3
 8001a2a:	000b      	movs	r3, r1
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08003184 	.word	0x08003184

08001a3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a44:	2017      	movs	r0, #23
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001a56:	e0c7      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a58:	4b84      	ldr	r3, [pc, #528]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	055b      	lsls	r3, r3, #21
 8001a60:	4013      	ands	r3, r2
 8001a62:	d109      	bne.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	4b81      	ldr	r3, [pc, #516]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a68:	4b80      	ldr	r3, [pc, #512]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	0549      	lsls	r1, r1, #21
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b7d      	ldr	r3, [pc, #500]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d11a      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a84:	4b7a      	ldr	r3, [pc, #488]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b79      	ldr	r3, [pc, #484]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	0049      	lsls	r1, r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7fe ffc5 	bl	8000a20 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	e008      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9c:	f7fe ffc0 	bl	8000a20 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b64      	cmp	r3, #100	@ 0x64
 8001aa8:	d901      	bls.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0d9      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b70      	ldr	r3, [pc, #448]	@ (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001aba:	4b6c      	ldr	r3, [pc, #432]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	23c0      	movs	r3, #192	@ 0xc0
 8001ac0:	039b      	lsls	r3, r3, #14
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	23c0      	movs	r3, #192	@ 0xc0
 8001acc:	039b      	lsls	r3, r3, #14
 8001ace:	4013      	ands	r3, r2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d013      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	23c0      	movs	r3, #192	@ 0xc0
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	401a      	ands	r2, r3
 8001ae0:	23c0      	movs	r3, #192	@ 0xc0
 8001ae2:	029b      	lsls	r3, r3, #10
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10a      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ae8:	4b60      	ldr	r3, [pc, #384]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	401a      	ands	r2, r3
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d101      	bne.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0b1      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001afe:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b02:	23c0      	movs	r3, #192	@ 0xc0
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03b      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	23c0      	movs	r3, #192	@ 0xc0
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	4013      	ands	r3, r2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d033      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2220      	movs	r2, #32
 8001b26:	4013      	ands	r3, r2
 8001b28:	d02e      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b2a:	4b50      	ldr	r3, [pc, #320]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b2e:	4a51      	ldr	r2, [pc, #324]	@ (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b34:	4b4d      	ldr	r3, [pc, #308]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b38:	4b4c      	ldr	r3, [pc, #304]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b3a:	2180      	movs	r1, #128	@ 0x80
 8001b3c:	0309      	lsls	r1, r1, #12
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b42:	4b4a      	ldr	r3, [pc, #296]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b46:	4b49      	ldr	r3, [pc, #292]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b48:	494b      	ldr	r1, [pc, #300]	@ (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b4e:	4b47      	ldr	r3, [pc, #284]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	2380      	movs	r3, #128	@ 0x80
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d014      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe ff5f 	bl	8000a20 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b66:	e009      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7fe ff5a 	bl	8000a20 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a42      	ldr	r2, [pc, #264]	@ (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e072      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0ef      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	23c0      	movs	r3, #192	@ 0xc0
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	23c0      	movs	r3, #192	@ 0xc0
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d10c      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001ba4:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a35      	ldr	r2, [pc, #212]	@ (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	23c0      	movs	r3, #192	@ 0xc0
 8001bb4:	039b      	lsls	r3, r3, #14
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	23c0      	movs	r3, #192	@ 0xc0
 8001bc8:	029b      	lsls	r3, r3, #10
 8001bca:	401a      	ands	r2, r3
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bd2:	2317      	movs	r3, #23
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bdc:	4b23      	ldr	r3, [pc, #140]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001be2:	4928      	ldr	r1, [pc, #160]	@ (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c14:	4a1c      	ldr	r2, [pc, #112]	@ (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695a      	ldr	r2, [r3, #20]
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b006      	add	sp, #24
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40007000 	.word	0x40007000
 8001c74:	fffcffff 	.word	0xfffcffff
 8001c78:	fff7ffff 	.word	0xfff7ffff
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	ffcfffff 	.word	0xffcfffff
 8001c84:	efffffff 	.word	0xefffffff
 8001c88:	fffff3ff 	.word	0xfffff3ff
 8001c8c:	ffffcfff 	.word	0xffffcfff
 8001c90:	fff3ffff 	.word	0xfff3ffff

08001c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e044      	b.n	8001d30 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d107      	bne.n	8001cbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2278      	movs	r2, #120	@ 0x78
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7fe fd21 	bl	8000700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2224      	movs	r2, #36	@ 0x24
 8001cc2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f8d0 	bl	8001e7c <UART_SetConfig>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e024      	b.n	8001d30 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 fb0d 	bl	8002310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <HAL_UART_Init+0xa4>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	212a      	movs	r1, #42	@ 0x2a
 8001d12:	438a      	bics	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f000 fba5 	bl	8002478 <UART_CheckIdleState>
 8001d2e:	0003      	movs	r3, r0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	ffffb7ff 	.word	0xffffb7ff

08001d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d000      	beq.n	8001d56 <HAL_UART_Transmit+0x1a>
 8001d54:	e08c      	b.n	8001e70 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_UART_Transmit+0x28>
 8001d5c:	1dbb      	adds	r3, r7, #6
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e084      	b.n	8001e72 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d109      	bne.n	8001d88 <HAL_UART_Transmit+0x4c>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d001      	beq.n	8001d88 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e074      	b.n	8001e72 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2284      	movs	r2, #132	@ 0x84
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2221      	movs	r2, #33	@ 0x21
 8001d94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d96:	f7fe fe43 	bl	8000a20 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1dba      	adds	r2, r7, #6
 8001da2:	2150      	movs	r1, #80	@ 0x50
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1dba      	adds	r2, r7, #6
 8001dac:	2152      	movs	r1, #82	@ 0x52
 8001dae:	8812      	ldrh	r2, [r2, #0]
 8001db0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d108      	bne.n	8001dd0 <HAL_UART_Transmit+0x94>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d104      	bne.n	8001dd0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	e003      	b.n	8001dd8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001dd8:	e02f      	b.n	8001e3a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	0013      	movs	r3, r2
 8001de4:	2200      	movs	r2, #0
 8001de6:	2180      	movs	r1, #128	@ 0x80
 8001de8:	f000 fbee 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8001dec:	1e03      	subs	r3, r0, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e03b      	b.n	8001e72 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	001a      	movs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	05d2      	lsls	r2, r2, #23
 8001e0c:	0dd2      	lsrs	r2, r2, #23
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	3302      	adds	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	e007      	b.n	8001e28 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2252      	movs	r2, #82	@ 0x52
 8001e2c:	5a9b      	ldrh	r3, [r3, r2]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b299      	uxth	r1, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2252      	movs	r2, #82	@ 0x52
 8001e38:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2252      	movs	r2, #82	@ 0x52
 8001e3e:	5a9b      	ldrh	r3, [r3, r2]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1c9      	bne.n	8001dda <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	0013      	movs	r3, r2
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	@ 0x40
 8001e54:	f000 fbb8 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8001e58:	1e03      	subs	r3, r0, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e005      	b.n	8001e72 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e000      	b.n	8001e72 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
  }
}
 8001e72:	0018      	movs	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	b008      	add	sp, #32
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b08e      	sub	sp, #56	@ 0x38
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e84:	231a      	movs	r3, #26
 8001e86:	2218      	movs	r2, #24
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	19db      	adds	r3, r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4ab4      	ldr	r2, [pc, #720]	@ (8002180 <UART_SetConfig+0x304>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4aaf      	ldr	r2, [pc, #700]	@ (8002184 <UART_SetConfig+0x308>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4aa9      	ldr	r2, [pc, #676]	@ (8002188 <UART_SetConfig+0x30c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eec:	4313      	orrs	r3, r2
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4aa5      	ldr	r2, [pc, #660]	@ (800218c <UART_SetConfig+0x310>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f02:	430a      	orrs	r2, r1
 8001f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4aa1      	ldr	r2, [pc, #644]	@ (8002190 <UART_SetConfig+0x314>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d131      	bne.n	8001f74 <UART_SetConfig+0xf8>
 8001f10:	4ba0      	ldr	r3, [pc, #640]	@ (8002194 <UART_SetConfig+0x318>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	220c      	movs	r2, #12
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b0c      	cmp	r3, #12
 8001f1a:	d01d      	beq.n	8001f58 <UART_SetConfig+0xdc>
 8001f1c:	d823      	bhi.n	8001f66 <UART_SetConfig+0xea>
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d00c      	beq.n	8001f3c <UART_SetConfig+0xc0>
 8001f22:	d820      	bhi.n	8001f66 <UART_SetConfig+0xea>
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <UART_SetConfig+0xb2>
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d00e      	beq.n	8001f4a <UART_SetConfig+0xce>
 8001f2c:	e01b      	b.n	8001f66 <UART_SetConfig+0xea>
 8001f2e:	231b      	movs	r3, #27
 8001f30:	2218      	movs	r2, #24
 8001f32:	189b      	adds	r3, r3, r2
 8001f34:	19db      	adds	r3, r3, r7
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
 8001f3a:	e065      	b.n	8002008 <UART_SetConfig+0x18c>
 8001f3c:	231b      	movs	r3, #27
 8001f3e:	2218      	movs	r2, #24
 8001f40:	189b      	adds	r3, r3, r2
 8001f42:	19db      	adds	r3, r3, r7
 8001f44:	2202      	movs	r2, #2
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e05e      	b.n	8002008 <UART_SetConfig+0x18c>
 8001f4a:	231b      	movs	r3, #27
 8001f4c:	2218      	movs	r2, #24
 8001f4e:	189b      	adds	r3, r3, r2
 8001f50:	19db      	adds	r3, r3, r7
 8001f52:	2204      	movs	r2, #4
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e057      	b.n	8002008 <UART_SetConfig+0x18c>
 8001f58:	231b      	movs	r3, #27
 8001f5a:	2218      	movs	r2, #24
 8001f5c:	189b      	adds	r3, r3, r2
 8001f5e:	19db      	adds	r3, r3, r7
 8001f60:	2208      	movs	r2, #8
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e050      	b.n	8002008 <UART_SetConfig+0x18c>
 8001f66:	231b      	movs	r3, #27
 8001f68:	2218      	movs	r2, #24
 8001f6a:	189b      	adds	r3, r3, r2
 8001f6c:	19db      	adds	r3, r3, r7
 8001f6e:	2210      	movs	r2, #16
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e049      	b.n	8002008 <UART_SetConfig+0x18c>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a83      	ldr	r2, [pc, #524]	@ (8002188 <UART_SetConfig+0x30c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d13e      	bne.n	8001ffc <UART_SetConfig+0x180>
 8001f7e:	4b85      	ldr	r3, [pc, #532]	@ (8002194 <UART_SetConfig+0x318>)
 8001f80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f82:	23c0      	movs	r3, #192	@ 0xc0
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	4013      	ands	r3, r2
 8001f88:	22c0      	movs	r2, #192	@ 0xc0
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d027      	beq.n	8001fe0 <UART_SetConfig+0x164>
 8001f90:	22c0      	movs	r2, #192	@ 0xc0
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d82a      	bhi.n	8001fee <UART_SetConfig+0x172>
 8001f98:	2280      	movs	r2, #128	@ 0x80
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d011      	beq.n	8001fc4 <UART_SetConfig+0x148>
 8001fa0:	2280      	movs	r2, #128	@ 0x80
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d822      	bhi.n	8001fee <UART_SetConfig+0x172>
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <UART_SetConfig+0x13a>
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	00d2      	lsls	r2, r2, #3
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00e      	beq.n	8001fd2 <UART_SetConfig+0x156>
 8001fb4:	e01b      	b.n	8001fee <UART_SetConfig+0x172>
 8001fb6:	231b      	movs	r3, #27
 8001fb8:	2218      	movs	r2, #24
 8001fba:	189b      	adds	r3, r3, r2
 8001fbc:	19db      	adds	r3, r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e021      	b.n	8002008 <UART_SetConfig+0x18c>
 8001fc4:	231b      	movs	r3, #27
 8001fc6:	2218      	movs	r2, #24
 8001fc8:	189b      	adds	r3, r3, r2
 8001fca:	19db      	adds	r3, r3, r7
 8001fcc:	2202      	movs	r2, #2
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	e01a      	b.n	8002008 <UART_SetConfig+0x18c>
 8001fd2:	231b      	movs	r3, #27
 8001fd4:	2218      	movs	r2, #24
 8001fd6:	189b      	adds	r3, r3, r2
 8001fd8:	19db      	adds	r3, r3, r7
 8001fda:	2204      	movs	r2, #4
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e013      	b.n	8002008 <UART_SetConfig+0x18c>
 8001fe0:	231b      	movs	r3, #27
 8001fe2:	2218      	movs	r2, #24
 8001fe4:	189b      	adds	r3, r3, r2
 8001fe6:	19db      	adds	r3, r3, r7
 8001fe8:	2208      	movs	r2, #8
 8001fea:	701a      	strb	r2, [r3, #0]
 8001fec:	e00c      	b.n	8002008 <UART_SetConfig+0x18c>
 8001fee:	231b      	movs	r3, #27
 8001ff0:	2218      	movs	r2, #24
 8001ff2:	189b      	adds	r3, r3, r2
 8001ff4:	19db      	adds	r3, r3, r7
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e005      	b.n	8002008 <UART_SetConfig+0x18c>
 8001ffc:	231b      	movs	r3, #27
 8001ffe:	2218      	movs	r2, #24
 8002000:	189b      	adds	r3, r3, r2
 8002002:	19db      	adds	r3, r3, r7
 8002004:	2210      	movs	r2, #16
 8002006:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a5e      	ldr	r2, [pc, #376]	@ (8002188 <UART_SetConfig+0x30c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d000      	beq.n	8002014 <UART_SetConfig+0x198>
 8002012:	e084      	b.n	800211e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002014:	231b      	movs	r3, #27
 8002016:	2218      	movs	r2, #24
 8002018:	189b      	adds	r3, r3, r2
 800201a:	19db      	adds	r3, r3, r7
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b08      	cmp	r3, #8
 8002020:	d01d      	beq.n	800205e <UART_SetConfig+0x1e2>
 8002022:	dc20      	bgt.n	8002066 <UART_SetConfig+0x1ea>
 8002024:	2b04      	cmp	r3, #4
 8002026:	d015      	beq.n	8002054 <UART_SetConfig+0x1d8>
 8002028:	dc1d      	bgt.n	8002066 <UART_SetConfig+0x1ea>
 800202a:	2b00      	cmp	r3, #0
 800202c:	d002      	beq.n	8002034 <UART_SetConfig+0x1b8>
 800202e:	2b02      	cmp	r3, #2
 8002030:	d005      	beq.n	800203e <UART_SetConfig+0x1c2>
 8002032:	e018      	b.n	8002066 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002034:	f7ff fcd6 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8002038:	0003      	movs	r3, r0
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800203c:	e01c      	b.n	8002078 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800203e:	4b55      	ldr	r3, [pc, #340]	@ (8002194 <UART_SetConfig+0x318>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2210      	movs	r2, #16
 8002044:	4013      	ands	r3, r2
 8002046:	d002      	beq.n	800204e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <UART_SetConfig+0x31c>)
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800204c:	e014      	b.n	8002078 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800204e:	4b53      	ldr	r3, [pc, #332]	@ (800219c <UART_SetConfig+0x320>)
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002052:	e011      	b.n	8002078 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002054:	f7ff fc16 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8002058:	0003      	movs	r3, r0
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800205c:	e00c      	b.n	8002078 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002064:	e008      	b.n	8002078 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800206a:	231a      	movs	r3, #26
 800206c:	2218      	movs	r2, #24
 800206e:	189b      	adds	r3, r3, r2
 8002070:	19db      	adds	r3, r3, r7
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
        break;
 8002076:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <UART_SetConfig+0x204>
 800207e:	e12f      	b.n	80022e0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	0013      	movs	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	189b      	adds	r3, r3, r2
 800208a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800208c:	429a      	cmp	r2, r3
 800208e:	d305      	bcc.n	800209c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002098:	429a      	cmp	r2, r3
 800209a:	d906      	bls.n	80020aa <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 800209c:	231a      	movs	r3, #26
 800209e:	2218      	movs	r2, #24
 80020a0:	189b      	adds	r3, r3, r2
 80020a2:	19db      	adds	r3, r3, r7
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e11a      	b.n	80022e0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80020aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	6939      	ldr	r1, [r7, #16]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	000b      	movs	r3, r1
 80020b8:	0e1b      	lsrs	r3, r3, #24
 80020ba:	0010      	movs	r0, r2
 80020bc:	0205      	lsls	r5, r0, #8
 80020be:	431d      	orrs	r5, r3
 80020c0:	000b      	movs	r3, r1
 80020c2:	021c      	lsls	r4, r3, #8
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	68f9      	ldr	r1, [r7, #12]
 80020d4:	1900      	adds	r0, r0, r4
 80020d6:	4169      	adcs	r1, r5
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f7fe f89b 	bl	8000220 <__aeabi_uldivmod>
 80020ea:	0002      	movs	r2, r0
 80020ec:	000b      	movs	r3, r1
 80020ee:	0013      	movs	r3, r2
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80020f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020f4:	23c0      	movs	r3, #192	@ 0xc0
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d309      	bcc.n	8002110 <UART_SetConfig+0x294>
 80020fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	035b      	lsls	r3, r3, #13
 8002102:	429a      	cmp	r2, r3
 8002104:	d204      	bcs.n	8002110 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e0e7      	b.n	80022e0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002110:	231a      	movs	r3, #26
 8002112:	2218      	movs	r2, #24
 8002114:	189b      	adds	r3, r3, r2
 8002116:	19db      	adds	r3, r3, r7
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e0e0      	b.n	80022e0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	429a      	cmp	r2, r3
 8002128:	d000      	beq.n	800212c <UART_SetConfig+0x2b0>
 800212a:	e082      	b.n	8002232 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800212c:	231b      	movs	r3, #27
 800212e:	2218      	movs	r2, #24
 8002130:	189b      	adds	r3, r3, r2
 8002132:	19db      	adds	r3, r3, r7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b08      	cmp	r3, #8
 8002138:	d834      	bhi.n	80021a4 <UART_SetConfig+0x328>
 800213a:	009a      	lsls	r2, r3, #2
 800213c:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <UART_SetConfig+0x324>)
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002144:	f7ff fc4e 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8002148:	0003      	movs	r3, r0
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800214c:	e033      	b.n	80021b6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800214e:	f7ff fc5f 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8002152:	0003      	movs	r3, r0
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002156:	e02e      	b.n	80021b6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <UART_SetConfig+0x318>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2210      	movs	r2, #16
 800215e:	4013      	ands	r3, r2
 8002160:	d002      	beq.n	8002168 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002162:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <UART_SetConfig+0x31c>)
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002166:	e026      	b.n	80021b6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002168:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <UART_SetConfig+0x320>)
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800216c:	e023      	b.n	80021b6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800216e:	f7ff fb89 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8002172:	0003      	movs	r3, r0
 8002174:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002176:	e01e      	b.n	80021b6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800217e:	e01a      	b.n	80021b6 <UART_SetConfig+0x33a>
 8002180:	efff69f3 	.word	0xefff69f3
 8002184:	ffffcfff 	.word	0xffffcfff
 8002188:	40004800 	.word	0x40004800
 800218c:	fffff4ff 	.word	0xfffff4ff
 8002190:	40004400 	.word	0x40004400
 8002194:	40021000 	.word	0x40021000
 8002198:	003d0900 	.word	0x003d0900
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	08003198 	.word	0x08003198
      default:
        pclk = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80021a8:	231a      	movs	r3, #26
 80021aa:	2218      	movs	r2, #24
 80021ac:	189b      	adds	r3, r3, r2
 80021ae:	19db      	adds	r3, r3, r7
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
        break;
 80021b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d100      	bne.n	80021be <UART_SetConfig+0x342>
 80021bc:	e090      	b.n	80022e0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c0:	005a      	lsls	r2, r3, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	085b      	lsrs	r3, r3, #1
 80021c8:	18d2      	adds	r2, r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	0019      	movs	r1, r3
 80021d0:	0010      	movs	r0, r2
 80021d2:	f7fd ff99 	bl	8000108 <__udivsi3>
 80021d6:	0003      	movs	r3, r0
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	2b0f      	cmp	r3, #15
 80021de:	d921      	bls.n	8002224 <UART_SetConfig+0x3a8>
 80021e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	025b      	lsls	r3, r3, #9
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d21c      	bcs.n	8002224 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	200e      	movs	r0, #14
 80021f0:	2418      	movs	r4, #24
 80021f2:	1903      	adds	r3, r0, r4
 80021f4:	19db      	adds	r3, r3, r7
 80021f6:	210f      	movs	r1, #15
 80021f8:	438a      	bics	r2, r1
 80021fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	b29b      	uxth	r3, r3
 8002202:	2207      	movs	r2, #7
 8002204:	4013      	ands	r3, r2
 8002206:	b299      	uxth	r1, r3
 8002208:	1903      	adds	r3, r0, r4
 800220a:	19db      	adds	r3, r3, r7
 800220c:	1902      	adds	r2, r0, r4
 800220e:	19d2      	adds	r2, r2, r7
 8002210:	8812      	ldrh	r2, [r2, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1902      	adds	r2, r0, r4
 800221c:	19d2      	adds	r2, r2, r7
 800221e:	8812      	ldrh	r2, [r2, #0]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	e05d      	b.n	80022e0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002224:	231a      	movs	r3, #26
 8002226:	2218      	movs	r2, #24
 8002228:	189b      	adds	r3, r3, r2
 800222a:	19db      	adds	r3, r3, r7
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e056      	b.n	80022e0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002232:	231b      	movs	r3, #27
 8002234:	2218      	movs	r2, #24
 8002236:	189b      	adds	r3, r3, r2
 8002238:	19db      	adds	r3, r3, r7
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d822      	bhi.n	8002286 <UART_SetConfig+0x40a>
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <UART_SetConfig+0x484>)
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800224a:	f7ff fbcb 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 800224e:	0003      	movs	r3, r0
 8002250:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002252:	e021      	b.n	8002298 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002254:	f7ff fbdc 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8002258:	0003      	movs	r3, r0
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800225c:	e01c      	b.n	8002298 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800225e:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <UART_SetConfig+0x488>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2210      	movs	r2, #16
 8002264:	4013      	ands	r3, r2
 8002266:	d002      	beq.n	800226e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002268:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <UART_SetConfig+0x48c>)
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800226c:	e014      	b.n	8002298 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800226e:	4b27      	ldr	r3, [pc, #156]	@ (800230c <UART_SetConfig+0x490>)
 8002270:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002272:	e011      	b.n	8002298 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002274:	f7ff fb06 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8002278:	0003      	movs	r3, r0
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800227c:	e00c      	b.n	8002298 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800227e:	2380      	movs	r3, #128	@ 0x80
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002284:	e008      	b.n	8002298 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800228a:	231a      	movs	r3, #26
 800228c:	2218      	movs	r2, #24
 800228e:	189b      	adds	r3, r3, r2
 8002290:	19db      	adds	r3, r3, r7
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
        break;
 8002296:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d020      	beq.n	80022e0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	085a      	lsrs	r2, r3, #1
 80022a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a6:	18d2      	adds	r2, r2, r3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	f7fd ff2a 	bl	8000108 <__udivsi3>
 80022b4:	0003      	movs	r3, r0
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d90a      	bls.n	80022d4 <UART_SetConfig+0x458>
 80022be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	025b      	lsls	r3, r3, #9
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d205      	bcs.n	80022d4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	e005      	b.n	80022e0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80022d4:	231a      	movs	r3, #26
 80022d6:	2218      	movs	r2, #24
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	19db      	adds	r3, r3, r7
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2200      	movs	r2, #0
 80022e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2200      	movs	r2, #0
 80022ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80022ec:	231a      	movs	r3, #26
 80022ee:	2218      	movs	r2, #24
 80022f0:	189b      	adds	r3, r3, r2
 80022f2:	19db      	adds	r3, r3, r7
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b00e      	add	sp, #56	@ 0x38
 80022fc:	bdb0      	pop	{r4, r5, r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	080031bc 	.word	0x080031bc
 8002304:	40021000 	.word	0x40021000
 8002308:	003d0900 	.word	0x003d0900
 800230c:	00f42400 	.word	0x00f42400

08002310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	2201      	movs	r2, #1
 800231e:	4013      	ands	r3, r2
 8002320:	d00b      	beq.n	800233a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a4a      	ldr	r2, [pc, #296]	@ (8002454 <UART_AdvFeatureConfig+0x144>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d00b      	beq.n	800235c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a43      	ldr	r2, [pc, #268]	@ (8002458 <UART_AdvFeatureConfig+0x148>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	2204      	movs	r2, #4
 8002362:	4013      	ands	r3, r2
 8002364:	d00b      	beq.n	800237e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a3b      	ldr	r2, [pc, #236]	@ (800245c <UART_AdvFeatureConfig+0x14c>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	2208      	movs	r2, #8
 8002384:	4013      	ands	r3, r2
 8002386:	d00b      	beq.n	80023a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a34      	ldr	r2, [pc, #208]	@ (8002460 <UART_AdvFeatureConfig+0x150>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	2210      	movs	r2, #16
 80023a6:	4013      	ands	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002464 <UART_AdvFeatureConfig+0x154>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	2220      	movs	r2, #32
 80023c8:	4013      	ands	r3, r2
 80023ca:	d00b      	beq.n	80023e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4a25      	ldr	r2, [pc, #148]	@ (8002468 <UART_AdvFeatureConfig+0x158>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	4013      	ands	r3, r2
 80023ec:	d01d      	beq.n	800242a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a1d      	ldr	r2, [pc, #116]	@ (800246c <UART_AdvFeatureConfig+0x15c>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	035b      	lsls	r3, r3, #13
 800240e:	429a      	cmp	r2, r3
 8002410:	d10b      	bne.n	800242a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a15      	ldr	r2, [pc, #84]	@ (8002470 <UART_AdvFeatureConfig+0x160>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	4013      	ands	r3, r2
 8002432:	d00b      	beq.n	800244c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a0e      	ldr	r2, [pc, #56]	@ (8002474 <UART_AdvFeatureConfig+0x164>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
  }
}
 800244c:	46c0      	nop			@ (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	fffdffff 	.word	0xfffdffff
 8002458:	fffeffff 	.word	0xfffeffff
 800245c:	fffbffff 	.word	0xfffbffff
 8002460:	ffff7fff 	.word	0xffff7fff
 8002464:	ffffefff 	.word	0xffffefff
 8002468:	ffffdfff 	.word	0xffffdfff
 800246c:	ffefffff 	.word	0xffefffff
 8002470:	ff9fffff 	.word	0xff9fffff
 8002474:	fff7ffff 	.word	0xfff7ffff

08002478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b092      	sub	sp, #72	@ 0x48
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2284      	movs	r2, #132	@ 0x84
 8002484:	2100      	movs	r1, #0
 8002486:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002488:	f7fe faca 	bl	8000a20 <HAL_GetTick>
 800248c:	0003      	movs	r3, r0
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2208      	movs	r2, #8
 8002498:	4013      	ands	r3, r2
 800249a:	2b08      	cmp	r3, #8
 800249c:	d12c      	bne.n	80024f8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800249e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a0:	2280      	movs	r2, #128	@ 0x80
 80024a2:	0391      	lsls	r1, r2, #14
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4a46      	ldr	r2, [pc, #280]	@ (80025c0 <UART_CheckIdleState+0x148>)
 80024a8:	9200      	str	r2, [sp, #0]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f000 f88c 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 80024b0:	1e03      	subs	r3, r0, #0
 80024b2:	d021      	beq.n	80024f8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b4:	f3ef 8310 	mrs	r3, PRIMASK
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80024bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024be:	2301      	movs	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			@ (mov r8, r8)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2180      	movs	r1, #128	@ 0x80
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	f383 8810 	msr	PRIMASK, r3
}
 80024e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2278      	movs	r2, #120	@ 0x78
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e05f      	b.n	80025b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	2b04      	cmp	r3, #4
 8002504:	d146      	bne.n	8002594 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	03d1      	lsls	r1, r2, #15
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4a2c      	ldr	r2, [pc, #176]	@ (80025c0 <UART_CheckIdleState+0x148>)
 8002510:	9200      	str	r2, [sp, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	f000 f858 	bl	80025c8 <UART_WaitOnFlagUntilTimeout>
 8002518:	1e03      	subs	r3, r0, #0
 800251a:	d03b      	beq.n	8002594 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251c:	f3ef 8310 	mrs	r3, PRIMASK
 8002520:	60fb      	str	r3, [r7, #12]
  return(result);
 8002522:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002524:	637b      	str	r3, [r7, #52]	@ 0x34
 8002526:	2301      	movs	r3, #1
 8002528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4921      	ldr	r1, [pc, #132]	@ (80025c4 <UART_CheckIdleState+0x14c>)
 800253e:	400a      	ands	r2, r1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002544:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	61bb      	str	r3, [r7, #24]
  return(result);
 8002554:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002556:	633b      	str	r3, [r7, #48]	@ 0x30
 8002558:	2301      	movs	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002576:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	2120      	movs	r1, #32
 8002586:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2278      	movs	r2, #120	@ 0x78
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e011      	b.n	80025b8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	2120      	movs	r1, #32
 80025a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2278      	movs	r2, #120	@ 0x78
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b010      	add	sp, #64	@ 0x40
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	01ffffff 	.word	0x01ffffff
 80025c4:	fffffedf 	.word	0xfffffedf

080025c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	e04b      	b.n	8002672 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3301      	adds	r3, #1
 80025de:	d048      	beq.n	8002672 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7fe fa1e 	bl	8000a20 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04b      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	d035      	beq.n	8002672 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2208      	movs	r2, #8
 800260e:	4013      	ands	r3, r2
 8002610:	2b08      	cmp	r3, #8
 8002612:	d111      	bne.n	8002638 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2208      	movs	r2, #8
 800261a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	0018      	movs	r0, r3
 8002620:	f000 f83c 	bl	800269c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2284      	movs	r2, #132	@ 0x84
 8002628:	2108      	movs	r1, #8
 800262a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2278      	movs	r2, #120	@ 0x78
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e02c      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	401a      	ands	r2, r3
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	429a      	cmp	r2, r3
 800264a:	d112      	bne.n	8002672 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2280      	movs	r2, #128	@ 0x80
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0018      	movs	r0, r3
 800265a:	f000 f81f 	bl	800269c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2284      	movs	r2, #132	@ 0x84
 8002662:	2120      	movs	r1, #32
 8002664:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2278      	movs	r2, #120	@ 0x78
 800266a:	2100      	movs	r1, #0
 800266c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e00f      	b.n	8002692 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4013      	ands	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	425a      	negs	r2, r3
 8002682:	4153      	adcs	r3, r2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	001a      	movs	r2, r3
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d0a4      	beq.n	80025da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	@ 0x38
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a4:	f3ef 8310 	mrs	r3, PRIMASK
 80026a8:	617b      	str	r3, [r7, #20]
  return(result);
 80026aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			@ (mov r8, r8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4926      	ldr	r1, [pc, #152]	@ (8002760 <UART_EndRxTransfer+0xc4>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f383 8810 	msr	PRIMASK, r3
}
 80026d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d6:	f3ef 8310 	mrs	r3, PRIMASK
 80026da:	623b      	str	r3, [r7, #32]
  return(result);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026de:	633b      	str	r3, [r7, #48]	@ 0x30
 80026e0:	2301      	movs	r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2101      	movs	r1, #1
 80026f8:	438a      	bics	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	f383 8810 	msr	PRIMASK, r3
}
 8002706:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270c:	2b01      	cmp	r3, #1
 800270e:	d118      	bne.n	8002742 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002710:	f3ef 8310 	mrs	r3, PRIMASK
 8002714:	60bb      	str	r3, [r7, #8]
  return(result);
 8002716:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271a:	2301      	movs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f383 8810 	msr	PRIMASK, r3
}
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2110      	movs	r1, #16
 8002732:	438a      	bics	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002738:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2280      	movs	r2, #128	@ 0x80
 8002746:	2120      	movs	r1, #32
 8002748:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b00e      	add	sp, #56	@ 0x38
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	fffffedf 	.word	0xfffffedf

08002764 <std>:
 8002764:	2300      	movs	r3, #0
 8002766:	b510      	push	{r4, lr}
 8002768:	0004      	movs	r4, r0
 800276a:	6003      	str	r3, [r0, #0]
 800276c:	6043      	str	r3, [r0, #4]
 800276e:	6083      	str	r3, [r0, #8]
 8002770:	8181      	strh	r1, [r0, #12]
 8002772:	6643      	str	r3, [r0, #100]	@ 0x64
 8002774:	81c2      	strh	r2, [r0, #14]
 8002776:	6103      	str	r3, [r0, #16]
 8002778:	6143      	str	r3, [r0, #20]
 800277a:	6183      	str	r3, [r0, #24]
 800277c:	0019      	movs	r1, r3
 800277e:	2208      	movs	r2, #8
 8002780:	305c      	adds	r0, #92	@ 0x5c
 8002782:	f000 f9ff 	bl	8002b84 <memset>
 8002786:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <std+0x50>)
 8002788:	6224      	str	r4, [r4, #32]
 800278a:	6263      	str	r3, [r4, #36]	@ 0x24
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <std+0x54>)
 800278e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <std+0x58>)
 8002792:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002794:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <std+0x5c>)
 8002796:	6323      	str	r3, [r4, #48]	@ 0x30
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <std+0x60>)
 800279a:	429c      	cmp	r4, r3
 800279c:	d005      	beq.n	80027aa <std+0x46>
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <std+0x64>)
 80027a0:	429c      	cmp	r4, r3
 80027a2:	d002      	beq.n	80027aa <std+0x46>
 80027a4:	4b09      	ldr	r3, [pc, #36]	@ (80027cc <std+0x68>)
 80027a6:	429c      	cmp	r4, r3
 80027a8:	d103      	bne.n	80027b2 <std+0x4e>
 80027aa:	0020      	movs	r0, r4
 80027ac:	3058      	adds	r0, #88	@ 0x58
 80027ae:	f000 fa69 	bl	8002c84 <__retarget_lock_init_recursive>
 80027b2:	bd10      	pop	{r4, pc}
 80027b4:	080029ad 	.word	0x080029ad
 80027b8:	080029d5 	.word	0x080029d5
 80027bc:	08002a0d 	.word	0x08002a0d
 80027c0:	08002a39 	.word	0x08002a39
 80027c4:	20000114 	.word	0x20000114
 80027c8:	2000017c 	.word	0x2000017c
 80027cc:	200001e4 	.word	0x200001e4

080027d0 <stdio_exit_handler>:
 80027d0:	b510      	push	{r4, lr}
 80027d2:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <stdio_exit_handler+0x10>)
 80027d4:	4903      	ldr	r1, [pc, #12]	@ (80027e4 <stdio_exit_handler+0x14>)
 80027d6:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <stdio_exit_handler+0x18>)
 80027d8:	f000 f86c 	bl	80028b4 <_fwalk_sglue>
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	2000000c 	.word	0x2000000c
 80027e4:	08002f91 	.word	0x08002f91
 80027e8:	2000001c 	.word	0x2000001c

080027ec <cleanup_stdio>:
 80027ec:	6841      	ldr	r1, [r0, #4]
 80027ee:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <cleanup_stdio+0x30>)
 80027f0:	b510      	push	{r4, lr}
 80027f2:	0004      	movs	r4, r0
 80027f4:	4299      	cmp	r1, r3
 80027f6:	d001      	beq.n	80027fc <cleanup_stdio+0x10>
 80027f8:	f000 fbca 	bl	8002f90 <_fflush_r>
 80027fc:	68a1      	ldr	r1, [r4, #8]
 80027fe:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <cleanup_stdio+0x34>)
 8002800:	4299      	cmp	r1, r3
 8002802:	d002      	beq.n	800280a <cleanup_stdio+0x1e>
 8002804:	0020      	movs	r0, r4
 8002806:	f000 fbc3 	bl	8002f90 <_fflush_r>
 800280a:	68e1      	ldr	r1, [r4, #12]
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <cleanup_stdio+0x38>)
 800280e:	4299      	cmp	r1, r3
 8002810:	d002      	beq.n	8002818 <cleanup_stdio+0x2c>
 8002812:	0020      	movs	r0, r4
 8002814:	f000 fbbc 	bl	8002f90 <_fflush_r>
 8002818:	bd10      	pop	{r4, pc}
 800281a:	46c0      	nop			@ (mov r8, r8)
 800281c:	20000114 	.word	0x20000114
 8002820:	2000017c 	.word	0x2000017c
 8002824:	200001e4 	.word	0x200001e4

08002828 <global_stdio_init.part.0>:
 8002828:	b510      	push	{r4, lr}
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <global_stdio_init.part.0+0x28>)
 800282c:	4a09      	ldr	r2, [pc, #36]	@ (8002854 <global_stdio_init.part.0+0x2c>)
 800282e:	2104      	movs	r1, #4
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4809      	ldr	r0, [pc, #36]	@ (8002858 <global_stdio_init.part.0+0x30>)
 8002834:	2200      	movs	r2, #0
 8002836:	f7ff ff95 	bl	8002764 <std>
 800283a:	2201      	movs	r2, #1
 800283c:	2109      	movs	r1, #9
 800283e:	4807      	ldr	r0, [pc, #28]	@ (800285c <global_stdio_init.part.0+0x34>)
 8002840:	f7ff ff90 	bl	8002764 <std>
 8002844:	2202      	movs	r2, #2
 8002846:	2112      	movs	r1, #18
 8002848:	4805      	ldr	r0, [pc, #20]	@ (8002860 <global_stdio_init.part.0+0x38>)
 800284a:	f7ff ff8b 	bl	8002764 <std>
 800284e:	bd10      	pop	{r4, pc}
 8002850:	2000024c 	.word	0x2000024c
 8002854:	080027d1 	.word	0x080027d1
 8002858:	20000114 	.word	0x20000114
 800285c:	2000017c 	.word	0x2000017c
 8002860:	200001e4 	.word	0x200001e4

08002864 <__sfp_lock_acquire>:
 8002864:	b510      	push	{r4, lr}
 8002866:	4802      	ldr	r0, [pc, #8]	@ (8002870 <__sfp_lock_acquire+0xc>)
 8002868:	f000 fa0d 	bl	8002c86 <__retarget_lock_acquire_recursive>
 800286c:	bd10      	pop	{r4, pc}
 800286e:	46c0      	nop			@ (mov r8, r8)
 8002870:	20000255 	.word	0x20000255

08002874 <__sfp_lock_release>:
 8002874:	b510      	push	{r4, lr}
 8002876:	4802      	ldr	r0, [pc, #8]	@ (8002880 <__sfp_lock_release+0xc>)
 8002878:	f000 fa06 	bl	8002c88 <__retarget_lock_release_recursive>
 800287c:	bd10      	pop	{r4, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	20000255 	.word	0x20000255

08002884 <__sinit>:
 8002884:	b510      	push	{r4, lr}
 8002886:	0004      	movs	r4, r0
 8002888:	f7ff ffec 	bl	8002864 <__sfp_lock_acquire>
 800288c:	6a23      	ldr	r3, [r4, #32]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <__sinit+0x14>
 8002892:	f7ff ffef 	bl	8002874 <__sfp_lock_release>
 8002896:	bd10      	pop	{r4, pc}
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__sinit+0x28>)
 800289a:	6223      	str	r3, [r4, #32]
 800289c:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <__sinit+0x2c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f6      	bne.n	8002892 <__sinit+0xe>
 80028a4:	f7ff ffc0 	bl	8002828 <global_stdio_init.part.0>
 80028a8:	e7f3      	b.n	8002892 <__sinit+0xe>
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	080027ed 	.word	0x080027ed
 80028b0:	2000024c 	.word	0x2000024c

080028b4 <_fwalk_sglue>:
 80028b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028b6:	0014      	movs	r4, r2
 80028b8:	2600      	movs	r6, #0
 80028ba:	9000      	str	r0, [sp, #0]
 80028bc:	9101      	str	r1, [sp, #4]
 80028be:	68a5      	ldr	r5, [r4, #8]
 80028c0:	6867      	ldr	r7, [r4, #4]
 80028c2:	3f01      	subs	r7, #1
 80028c4:	d504      	bpl.n	80028d0 <_fwalk_sglue+0x1c>
 80028c6:	6824      	ldr	r4, [r4, #0]
 80028c8:	2c00      	cmp	r4, #0
 80028ca:	d1f8      	bne.n	80028be <_fwalk_sglue+0xa>
 80028cc:	0030      	movs	r0, r6
 80028ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80028d0:	89ab      	ldrh	r3, [r5, #12]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d908      	bls.n	80028e8 <_fwalk_sglue+0x34>
 80028d6:	220e      	movs	r2, #14
 80028d8:	5eab      	ldrsh	r3, [r5, r2]
 80028da:	3301      	adds	r3, #1
 80028dc:	d004      	beq.n	80028e8 <_fwalk_sglue+0x34>
 80028de:	0029      	movs	r1, r5
 80028e0:	9800      	ldr	r0, [sp, #0]
 80028e2:	9b01      	ldr	r3, [sp, #4]
 80028e4:	4798      	blx	r3
 80028e6:	4306      	orrs	r6, r0
 80028e8:	3568      	adds	r5, #104	@ 0x68
 80028ea:	e7ea      	b.n	80028c2 <_fwalk_sglue+0xe>

080028ec <_puts_r>:
 80028ec:	6a03      	ldr	r3, [r0, #32]
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	0005      	movs	r5, r0
 80028f2:	000e      	movs	r6, r1
 80028f4:	6884      	ldr	r4, [r0, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <_puts_r+0x12>
 80028fa:	f7ff ffc3 	bl	8002884 <__sinit>
 80028fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002900:	07db      	lsls	r3, r3, #31
 8002902:	d405      	bmi.n	8002910 <_puts_r+0x24>
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	059b      	lsls	r3, r3, #22
 8002908:	d402      	bmi.n	8002910 <_puts_r+0x24>
 800290a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800290c:	f000 f9bb 	bl	8002c86 <__retarget_lock_acquire_recursive>
 8002910:	89a3      	ldrh	r3, [r4, #12]
 8002912:	071b      	lsls	r3, r3, #28
 8002914:	d502      	bpl.n	800291c <_puts_r+0x30>
 8002916:	6923      	ldr	r3, [r4, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11f      	bne.n	800295c <_puts_r+0x70>
 800291c:	0021      	movs	r1, r4
 800291e:	0028      	movs	r0, r5
 8002920:	f000 f8d2 	bl	8002ac8 <__swsetup_r>
 8002924:	2800      	cmp	r0, #0
 8002926:	d019      	beq.n	800295c <_puts_r+0x70>
 8002928:	2501      	movs	r5, #1
 800292a:	426d      	negs	r5, r5
 800292c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800292e:	07db      	lsls	r3, r3, #31
 8002930:	d405      	bmi.n	800293e <_puts_r+0x52>
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	059b      	lsls	r3, r3, #22
 8002936:	d402      	bmi.n	800293e <_puts_r+0x52>
 8002938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800293a:	f000 f9a5 	bl	8002c88 <__retarget_lock_release_recursive>
 800293e:	0028      	movs	r0, r5
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	3601      	adds	r6, #1
 8002944:	60a3      	str	r3, [r4, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da04      	bge.n	8002954 <_puts_r+0x68>
 800294a:	69a2      	ldr	r2, [r4, #24]
 800294c:	429a      	cmp	r2, r3
 800294e:	dc16      	bgt.n	800297e <_puts_r+0x92>
 8002950:	290a      	cmp	r1, #10
 8002952:	d014      	beq.n	800297e <_puts_r+0x92>
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	6022      	str	r2, [r4, #0]
 800295a:	7019      	strb	r1, [r3, #0]
 800295c:	68a3      	ldr	r3, [r4, #8]
 800295e:	7831      	ldrb	r1, [r6, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	2900      	cmp	r1, #0
 8002964:	d1ed      	bne.n	8002942 <_puts_r+0x56>
 8002966:	60a3      	str	r3, [r4, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da0f      	bge.n	800298c <_puts_r+0xa0>
 800296c:	0022      	movs	r2, r4
 800296e:	0028      	movs	r0, r5
 8002970:	310a      	adds	r1, #10
 8002972:	f000 f867 	bl	8002a44 <__swbuf_r>
 8002976:	3001      	adds	r0, #1
 8002978:	d0d6      	beq.n	8002928 <_puts_r+0x3c>
 800297a:	250a      	movs	r5, #10
 800297c:	e7d6      	b.n	800292c <_puts_r+0x40>
 800297e:	0022      	movs	r2, r4
 8002980:	0028      	movs	r0, r5
 8002982:	f000 f85f 	bl	8002a44 <__swbuf_r>
 8002986:	3001      	adds	r0, #1
 8002988:	d1e8      	bne.n	800295c <_puts_r+0x70>
 800298a:	e7cd      	b.n	8002928 <_puts_r+0x3c>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	6022      	str	r2, [r4, #0]
 8002992:	220a      	movs	r2, #10
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e7f0      	b.n	800297a <_puts_r+0x8e>

08002998 <puts>:
 8002998:	b510      	push	{r4, lr}
 800299a:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <puts+0x10>)
 800299c:	0001      	movs	r1, r0
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	f7ff ffa4 	bl	80028ec <_puts_r>
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	20000018 	.word	0x20000018

080029ac <__sread>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	000c      	movs	r4, r1
 80029b0:	250e      	movs	r5, #14
 80029b2:	5f49      	ldrsh	r1, [r1, r5]
 80029b4:	f000 f914 	bl	8002be0 <_read_r>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	db03      	blt.n	80029c4 <__sread+0x18>
 80029bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80029be:	181b      	adds	r3, r3, r0
 80029c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	4a02      	ldr	r2, [pc, #8]	@ (80029d0 <__sread+0x24>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	81a3      	strh	r3, [r4, #12]
 80029cc:	e7f9      	b.n	80029c2 <__sread+0x16>
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	ffffefff 	.word	0xffffefff

080029d4 <__swrite>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	001f      	movs	r7, r3
 80029d8:	898b      	ldrh	r3, [r1, #12]
 80029da:	0005      	movs	r5, r0
 80029dc:	000c      	movs	r4, r1
 80029de:	0016      	movs	r6, r2
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	d505      	bpl.n	80029f0 <__swrite+0x1c>
 80029e4:	230e      	movs	r3, #14
 80029e6:	5ec9      	ldrsh	r1, [r1, r3]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2302      	movs	r3, #2
 80029ec:	f000 f8e4 	bl	8002bb8 <_lseek_r>
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	4a05      	ldr	r2, [pc, #20]	@ (8002a08 <__swrite+0x34>)
 80029f4:	0028      	movs	r0, r5
 80029f6:	4013      	ands	r3, r2
 80029f8:	81a3      	strh	r3, [r4, #12]
 80029fa:	0032      	movs	r2, r6
 80029fc:	230e      	movs	r3, #14
 80029fe:	5ee1      	ldrsh	r1, [r4, r3]
 8002a00:	003b      	movs	r3, r7
 8002a02:	f000 f901 	bl	8002c08 <_write_r>
 8002a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a08:	ffffefff 	.word	0xffffefff

08002a0c <__sseek>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	000c      	movs	r4, r1
 8002a10:	250e      	movs	r5, #14
 8002a12:	5f49      	ldrsh	r1, [r1, r5]
 8002a14:	f000 f8d0 	bl	8002bb8 <_lseek_r>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	1c42      	adds	r2, r0, #1
 8002a1c:	d103      	bne.n	8002a26 <__sseek+0x1a>
 8002a1e:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <__sseek+0x28>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	81a3      	strh	r3, [r4, #12]
 8002a24:	bd70      	pop	{r4, r5, r6, pc}
 8002a26:	2280      	movs	r2, #128	@ 0x80
 8002a28:	0152      	lsls	r2, r2, #5
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	81a3      	strh	r3, [r4, #12]
 8002a2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a30:	e7f8      	b.n	8002a24 <__sseek+0x18>
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	ffffefff 	.word	0xffffefff

08002a38 <__sclose>:
 8002a38:	b510      	push	{r4, lr}
 8002a3a:	230e      	movs	r3, #14
 8002a3c:	5ec9      	ldrsh	r1, [r1, r3]
 8002a3e:	f000 f8a9 	bl	8002b94 <_close_r>
 8002a42:	bd10      	pop	{r4, pc}

08002a44 <__swbuf_r>:
 8002a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a46:	0006      	movs	r6, r0
 8002a48:	000d      	movs	r5, r1
 8002a4a:	0014      	movs	r4, r2
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d004      	beq.n	8002a5a <__swbuf_r+0x16>
 8002a50:	6a03      	ldr	r3, [r0, #32]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <__swbuf_r+0x16>
 8002a56:	f7ff ff15 	bl	8002884 <__sinit>
 8002a5a:	69a3      	ldr	r3, [r4, #24]
 8002a5c:	60a3      	str	r3, [r4, #8]
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	071b      	lsls	r3, r3, #28
 8002a62:	d502      	bpl.n	8002a6a <__swbuf_r+0x26>
 8002a64:	6923      	ldr	r3, [r4, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <__swbuf_r+0x3a>
 8002a6a:	0021      	movs	r1, r4
 8002a6c:	0030      	movs	r0, r6
 8002a6e:	f000 f82b 	bl	8002ac8 <__swsetup_r>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d003      	beq.n	8002a7e <__swbuf_r+0x3a>
 8002a76:	2501      	movs	r5, #1
 8002a78:	426d      	negs	r5, r5
 8002a7a:	0028      	movs	r0, r5
 8002a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a7e:	6923      	ldr	r3, [r4, #16]
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	b2ef      	uxtb	r7, r5
 8002a84:	1ac0      	subs	r0, r0, r3
 8002a86:	6963      	ldr	r3, [r4, #20]
 8002a88:	b2ed      	uxtb	r5, r5
 8002a8a:	4283      	cmp	r3, r0
 8002a8c:	dc05      	bgt.n	8002a9a <__swbuf_r+0x56>
 8002a8e:	0021      	movs	r1, r4
 8002a90:	0030      	movs	r0, r6
 8002a92:	f000 fa7d 	bl	8002f90 <_fflush_r>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d1ed      	bne.n	8002a76 <__swbuf_r+0x32>
 8002a9a:	68a3      	ldr	r3, [r4, #8]
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	60a3      	str	r3, [r4, #8]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	6022      	str	r2, [r4, #0]
 8002aa8:	701f      	strb	r7, [r3, #0]
 8002aaa:	6963      	ldr	r3, [r4, #20]
 8002aac:	4283      	cmp	r3, r0
 8002aae:	d004      	beq.n	8002aba <__swbuf_r+0x76>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	07db      	lsls	r3, r3, #31
 8002ab4:	d5e1      	bpl.n	8002a7a <__swbuf_r+0x36>
 8002ab6:	2d0a      	cmp	r5, #10
 8002ab8:	d1df      	bne.n	8002a7a <__swbuf_r+0x36>
 8002aba:	0021      	movs	r1, r4
 8002abc:	0030      	movs	r0, r6
 8002abe:	f000 fa67 	bl	8002f90 <_fflush_r>
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d0d9      	beq.n	8002a7a <__swbuf_r+0x36>
 8002ac6:	e7d6      	b.n	8002a76 <__swbuf_r+0x32>

08002ac8 <__swsetup_r>:
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <__swsetup_r+0xb8>)
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	0005      	movs	r5, r0
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d004      	beq.n	8002ae0 <__swsetup_r+0x18>
 8002ad6:	6a03      	ldr	r3, [r0, #32]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <__swsetup_r+0x18>
 8002adc:	f7ff fed2 	bl	8002884 <__sinit>
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	5ee2      	ldrsh	r2, [r4, r3]
 8002ae4:	0713      	lsls	r3, r2, #28
 8002ae6:	d423      	bmi.n	8002b30 <__swsetup_r+0x68>
 8002ae8:	06d3      	lsls	r3, r2, #27
 8002aea:	d407      	bmi.n	8002afc <__swsetup_r+0x34>
 8002aec:	2309      	movs	r3, #9
 8002aee:	602b      	str	r3, [r5, #0]
 8002af0:	2340      	movs	r3, #64	@ 0x40
 8002af2:	2001      	movs	r0, #1
 8002af4:	4313      	orrs	r3, r2
 8002af6:	81a3      	strh	r3, [r4, #12]
 8002af8:	4240      	negs	r0, r0
 8002afa:	e03a      	b.n	8002b72 <__swsetup_r+0xaa>
 8002afc:	0752      	lsls	r2, r2, #29
 8002afe:	d513      	bpl.n	8002b28 <__swsetup_r+0x60>
 8002b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b02:	2900      	cmp	r1, #0
 8002b04:	d008      	beq.n	8002b18 <__swsetup_r+0x50>
 8002b06:	0023      	movs	r3, r4
 8002b08:	3344      	adds	r3, #68	@ 0x44
 8002b0a:	4299      	cmp	r1, r3
 8002b0c:	d002      	beq.n	8002b14 <__swsetup_r+0x4c>
 8002b0e:	0028      	movs	r0, r5
 8002b10:	f000 f8bc 	bl	8002c8c <_free_r>
 8002b14:	2300      	movs	r3, #0
 8002b16:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b18:	2224      	movs	r2, #36	@ 0x24
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	4393      	bics	r3, r2
 8002b1e:	81a3      	strh	r3, [r4, #12]
 8002b20:	2300      	movs	r3, #0
 8002b22:	6063      	str	r3, [r4, #4]
 8002b24:	6923      	ldr	r3, [r4, #16]
 8002b26:	6023      	str	r3, [r4, #0]
 8002b28:	2308      	movs	r3, #8
 8002b2a:	89a2      	ldrh	r2, [r4, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	81a3      	strh	r3, [r4, #12]
 8002b30:	6923      	ldr	r3, [r4, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <__swsetup_r+0x86>
 8002b36:	21a0      	movs	r1, #160	@ 0xa0
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	89a3      	ldrh	r3, [r4, #12]
 8002b3c:	0089      	lsls	r1, r1, #2
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	400b      	ands	r3, r1
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <__swsetup_r+0x86>
 8002b46:	0021      	movs	r1, r4
 8002b48:	0028      	movs	r0, r5
 8002b4a:	f000 fa77 	bl	800303c <__smakebuf_r>
 8002b4e:	230c      	movs	r3, #12
 8002b50:	5ee2      	ldrsh	r2, [r4, r3]
 8002b52:	2101      	movs	r1, #1
 8002b54:	0013      	movs	r3, r2
 8002b56:	400b      	ands	r3, r1
 8002b58:	420a      	tst	r2, r1
 8002b5a:	d00b      	beq.n	8002b74 <__swsetup_r+0xac>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60a3      	str	r3, [r4, #8]
 8002b60:	6963      	ldr	r3, [r4, #20]
 8002b62:	425b      	negs	r3, r3
 8002b64:	61a3      	str	r3, [r4, #24]
 8002b66:	2000      	movs	r0, #0
 8002b68:	6923      	ldr	r3, [r4, #16]
 8002b6a:	4283      	cmp	r3, r0
 8002b6c:	d101      	bne.n	8002b72 <__swsetup_r+0xaa>
 8002b6e:	0613      	lsls	r3, r2, #24
 8002b70:	d4be      	bmi.n	8002af0 <__swsetup_r+0x28>
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
 8002b74:	0791      	lsls	r1, r2, #30
 8002b76:	d400      	bmi.n	8002b7a <__swsetup_r+0xb2>
 8002b78:	6963      	ldr	r3, [r4, #20]
 8002b7a:	60a3      	str	r3, [r4, #8]
 8002b7c:	e7f3      	b.n	8002b66 <__swsetup_r+0x9e>
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	20000018 	.word	0x20000018

08002b84 <memset>:
 8002b84:	0003      	movs	r3, r0
 8002b86:	1882      	adds	r2, r0, r2
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <memset+0xa>
 8002b8c:	4770      	bx	lr
 8002b8e:	7019      	strb	r1, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	e7f9      	b.n	8002b88 <memset+0x4>

08002b94 <_close_r>:
 8002b94:	2300      	movs	r3, #0
 8002b96:	b570      	push	{r4, r5, r6, lr}
 8002b98:	4d06      	ldr	r5, [pc, #24]	@ (8002bb4 <_close_r+0x20>)
 8002b9a:	0004      	movs	r4, r0
 8002b9c:	0008      	movs	r0, r1
 8002b9e:	602b      	str	r3, [r5, #0]
 8002ba0:	f7fd fe46 	bl	8000830 <_close>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d103      	bne.n	8002bb0 <_close_r+0x1c>
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d000      	beq.n	8002bb0 <_close_r+0x1c>
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	20000250 	.word	0x20000250

08002bb8 <_lseek_r>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	0004      	movs	r4, r0
 8002bbc:	0008      	movs	r0, r1
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4d05      	ldr	r5, [pc, #20]	@ (8002bdc <_lseek_r+0x24>)
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	f7fd fe53 	bl	8000872 <_lseek>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d103      	bne.n	8002bd8 <_lseek_r+0x20>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d000      	beq.n	8002bd8 <_lseek_r+0x20>
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	20000250 	.word	0x20000250

08002be0 <_read_r>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	0004      	movs	r4, r0
 8002be4:	0008      	movs	r0, r1
 8002be6:	0011      	movs	r1, r2
 8002be8:	001a      	movs	r2, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	4d05      	ldr	r5, [pc, #20]	@ (8002c04 <_read_r+0x24>)
 8002bee:	602b      	str	r3, [r5, #0]
 8002bf0:	f7fd fde5 	bl	80007be <_read>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	d103      	bne.n	8002c00 <_read_r+0x20>
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d000      	beq.n	8002c00 <_read_r+0x20>
 8002bfe:	6023      	str	r3, [r4, #0]
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	20000250 	.word	0x20000250

08002c08 <_write_r>:
 8002c08:	b570      	push	{r4, r5, r6, lr}
 8002c0a:	0004      	movs	r4, r0
 8002c0c:	0008      	movs	r0, r1
 8002c0e:	0011      	movs	r1, r2
 8002c10:	001a      	movs	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	4d05      	ldr	r5, [pc, #20]	@ (8002c2c <_write_r+0x24>)
 8002c16:	602b      	str	r3, [r5, #0]
 8002c18:	f7fd fdee 	bl	80007f8 <_write>
 8002c1c:	1c43      	adds	r3, r0, #1
 8002c1e:	d103      	bne.n	8002c28 <_write_r+0x20>
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d000      	beq.n	8002c28 <_write_r+0x20>
 8002c26:	6023      	str	r3, [r4, #0]
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	20000250 	.word	0x20000250

08002c30 <__errno>:
 8002c30:	4b01      	ldr	r3, [pc, #4]	@ (8002c38 <__errno+0x8>)
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	4770      	bx	lr
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	20000018 	.word	0x20000018

08002c3c <__libc_init_array>:
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	2600      	movs	r6, #0
 8002c40:	4c0c      	ldr	r4, [pc, #48]	@ (8002c74 <__libc_init_array+0x38>)
 8002c42:	4d0d      	ldr	r5, [pc, #52]	@ (8002c78 <__libc_init_array+0x3c>)
 8002c44:	1b64      	subs	r4, r4, r5
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	42a6      	cmp	r6, r4
 8002c4a:	d109      	bne.n	8002c60 <__libc_init_array+0x24>
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	f000 fa6d 	bl	800312c <_init>
 8002c52:	4c0a      	ldr	r4, [pc, #40]	@ (8002c7c <__libc_init_array+0x40>)
 8002c54:	4d0a      	ldr	r5, [pc, #40]	@ (8002c80 <__libc_init_array+0x44>)
 8002c56:	1b64      	subs	r4, r4, r5
 8002c58:	10a4      	asrs	r4, r4, #2
 8002c5a:	42a6      	cmp	r6, r4
 8002c5c:	d105      	bne.n	8002c6a <__libc_init_array+0x2e>
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	00b3      	lsls	r3, r6, #2
 8002c62:	58eb      	ldr	r3, [r5, r3]
 8002c64:	4798      	blx	r3
 8002c66:	3601      	adds	r6, #1
 8002c68:	e7ee      	b.n	8002c48 <__libc_init_array+0xc>
 8002c6a:	00b3      	lsls	r3, r6, #2
 8002c6c:	58eb      	ldr	r3, [r5, r3]
 8002c6e:	4798      	blx	r3
 8002c70:	3601      	adds	r6, #1
 8002c72:	e7f2      	b.n	8002c5a <__libc_init_array+0x1e>
 8002c74:	080031e8 	.word	0x080031e8
 8002c78:	080031e8 	.word	0x080031e8
 8002c7c:	080031ec 	.word	0x080031ec
 8002c80:	080031e8 	.word	0x080031e8

08002c84 <__retarget_lock_init_recursive>:
 8002c84:	4770      	bx	lr

08002c86 <__retarget_lock_acquire_recursive>:
 8002c86:	4770      	bx	lr

08002c88 <__retarget_lock_release_recursive>:
 8002c88:	4770      	bx	lr
	...

08002c8c <_free_r>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	0005      	movs	r5, r0
 8002c90:	1e0c      	subs	r4, r1, #0
 8002c92:	d010      	beq.n	8002cb6 <_free_r+0x2a>
 8002c94:	3c04      	subs	r4, #4
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da00      	bge.n	8002c9e <_free_r+0x12>
 8002c9c:	18e4      	adds	r4, r4, r3
 8002c9e:	0028      	movs	r0, r5
 8002ca0:	f000 f8e0 	bl	8002e64 <__malloc_lock>
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <_free_r+0x90>)
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <_free_r+0x2c>
 8002cac:	6063      	str	r3, [r4, #4]
 8002cae:	6014      	str	r4, [r2, #0]
 8002cb0:	0028      	movs	r0, r5
 8002cb2:	f000 f8df 	bl	8002e74 <__malloc_unlock>
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	d908      	bls.n	8002cce <_free_r+0x42>
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	1821      	adds	r1, r4, r0
 8002cc0:	428b      	cmp	r3, r1
 8002cc2:	d1f3      	bne.n	8002cac <_free_r+0x20>
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	1809      	adds	r1, r1, r0
 8002cca:	6021      	str	r1, [r4, #0]
 8002ccc:	e7ee      	b.n	8002cac <_free_r+0x20>
 8002cce:	001a      	movs	r2, r3
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <_free_r+0x4e>
 8002cd6:	42a3      	cmp	r3, r4
 8002cd8:	d9f9      	bls.n	8002cce <_free_r+0x42>
 8002cda:	6811      	ldr	r1, [r2, #0]
 8002cdc:	1850      	adds	r0, r2, r1
 8002cde:	42a0      	cmp	r0, r4
 8002ce0:	d10b      	bne.n	8002cfa <_free_r+0x6e>
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	1809      	adds	r1, r1, r0
 8002ce6:	1850      	adds	r0, r2, r1
 8002ce8:	6011      	str	r1, [r2, #0]
 8002cea:	4283      	cmp	r3, r0
 8002cec:	d1e0      	bne.n	8002cb0 <_free_r+0x24>
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	1841      	adds	r1, r0, r1
 8002cf4:	6011      	str	r1, [r2, #0]
 8002cf6:	6053      	str	r3, [r2, #4]
 8002cf8:	e7da      	b.n	8002cb0 <_free_r+0x24>
 8002cfa:	42a0      	cmp	r0, r4
 8002cfc:	d902      	bls.n	8002d04 <_free_r+0x78>
 8002cfe:	230c      	movs	r3, #12
 8002d00:	602b      	str	r3, [r5, #0]
 8002d02:	e7d5      	b.n	8002cb0 <_free_r+0x24>
 8002d04:	6820      	ldr	r0, [r4, #0]
 8002d06:	1821      	adds	r1, r4, r0
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	d103      	bne.n	8002d14 <_free_r+0x88>
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	1809      	adds	r1, r1, r0
 8002d12:	6021      	str	r1, [r4, #0]
 8002d14:	6063      	str	r3, [r4, #4]
 8002d16:	6054      	str	r4, [r2, #4]
 8002d18:	e7ca      	b.n	8002cb0 <_free_r+0x24>
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	2000025c 	.word	0x2000025c

08002d20 <sbrk_aligned>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	4e0f      	ldr	r6, [pc, #60]	@ (8002d60 <sbrk_aligned+0x40>)
 8002d24:	000d      	movs	r5, r1
 8002d26:	6831      	ldr	r1, [r6, #0]
 8002d28:	0004      	movs	r4, r0
 8002d2a:	2900      	cmp	r1, #0
 8002d2c:	d102      	bne.n	8002d34 <sbrk_aligned+0x14>
 8002d2e:	f000 f9eb 	bl	8003108 <_sbrk_r>
 8002d32:	6030      	str	r0, [r6, #0]
 8002d34:	0029      	movs	r1, r5
 8002d36:	0020      	movs	r0, r4
 8002d38:	f000 f9e6 	bl	8003108 <_sbrk_r>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d103      	bne.n	8002d48 <sbrk_aligned+0x28>
 8002d40:	2501      	movs	r5, #1
 8002d42:	426d      	negs	r5, r5
 8002d44:	0028      	movs	r0, r5
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	2303      	movs	r3, #3
 8002d4a:	1cc5      	adds	r5, r0, #3
 8002d4c:	439d      	bics	r5, r3
 8002d4e:	42a8      	cmp	r0, r5
 8002d50:	d0f8      	beq.n	8002d44 <sbrk_aligned+0x24>
 8002d52:	1a29      	subs	r1, r5, r0
 8002d54:	0020      	movs	r0, r4
 8002d56:	f000 f9d7 	bl	8003108 <_sbrk_r>
 8002d5a:	3001      	adds	r0, #1
 8002d5c:	d1f2      	bne.n	8002d44 <sbrk_aligned+0x24>
 8002d5e:	e7ef      	b.n	8002d40 <sbrk_aligned+0x20>
 8002d60:	20000258 	.word	0x20000258

08002d64 <_malloc_r>:
 8002d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d66:	2203      	movs	r2, #3
 8002d68:	1ccb      	adds	r3, r1, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	0005      	movs	r5, r0
 8002d70:	001f      	movs	r7, r3
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d234      	bcs.n	8002de0 <_malloc_r+0x7c>
 8002d76:	270c      	movs	r7, #12
 8002d78:	42b9      	cmp	r1, r7
 8002d7a:	d833      	bhi.n	8002de4 <_malloc_r+0x80>
 8002d7c:	0028      	movs	r0, r5
 8002d7e:	f000 f871 	bl	8002e64 <__malloc_lock>
 8002d82:	4e37      	ldr	r6, [pc, #220]	@ (8002e60 <_malloc_r+0xfc>)
 8002d84:	6833      	ldr	r3, [r6, #0]
 8002d86:	001c      	movs	r4, r3
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d12f      	bne.n	8002dec <_malloc_r+0x88>
 8002d8c:	0039      	movs	r1, r7
 8002d8e:	0028      	movs	r0, r5
 8002d90:	f7ff ffc6 	bl	8002d20 <sbrk_aligned>
 8002d94:	0004      	movs	r4, r0
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	d15f      	bne.n	8002e5a <_malloc_r+0xf6>
 8002d9a:	6834      	ldr	r4, [r6, #0]
 8002d9c:	9400      	str	r4, [sp, #0]
 8002d9e:	9b00      	ldr	r3, [sp, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d14a      	bne.n	8002e3a <_malloc_r+0xd6>
 8002da4:	2c00      	cmp	r4, #0
 8002da6:	d052      	beq.n	8002e4e <_malloc_r+0xea>
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	0028      	movs	r0, r5
 8002dac:	18e3      	adds	r3, r4, r3
 8002dae:	9900      	ldr	r1, [sp, #0]
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	f000 f9a9 	bl	8003108 <_sbrk_r>
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	4283      	cmp	r3, r0
 8002dba:	d148      	bne.n	8002e4e <_malloc_r+0xea>
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	0028      	movs	r0, r5
 8002dc0:	1aff      	subs	r7, r7, r3
 8002dc2:	0039      	movs	r1, r7
 8002dc4:	f7ff ffac 	bl	8002d20 <sbrk_aligned>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d040      	beq.n	8002e4e <_malloc_r+0xea>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	6833      	ldr	r3, [r6, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d133      	bne.n	8002e42 <_malloc_r+0xde>
 8002dda:	9b00      	ldr	r3, [sp, #0]
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	e019      	b.n	8002e14 <_malloc_r+0xb0>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	dac9      	bge.n	8002d78 <_malloc_r+0x14>
 8002de4:	230c      	movs	r3, #12
 8002de6:	602b      	str	r3, [r5, #0]
 8002de8:	2000      	movs	r0, #0
 8002dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dec:	6821      	ldr	r1, [r4, #0]
 8002dee:	1bc9      	subs	r1, r1, r7
 8002df0:	d420      	bmi.n	8002e34 <_malloc_r+0xd0>
 8002df2:	290b      	cmp	r1, #11
 8002df4:	d90a      	bls.n	8002e0c <_malloc_r+0xa8>
 8002df6:	19e2      	adds	r2, r4, r7
 8002df8:	6027      	str	r7, [r4, #0]
 8002dfa:	42a3      	cmp	r3, r4
 8002dfc:	d104      	bne.n	8002e08 <_malloc_r+0xa4>
 8002dfe:	6032      	str	r2, [r6, #0]
 8002e00:	6863      	ldr	r3, [r4, #4]
 8002e02:	6011      	str	r1, [r2, #0]
 8002e04:	6053      	str	r3, [r2, #4]
 8002e06:	e005      	b.n	8002e14 <_malloc_r+0xb0>
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e7f9      	b.n	8002e00 <_malloc_r+0x9c>
 8002e0c:	6862      	ldr	r2, [r4, #4]
 8002e0e:	42a3      	cmp	r3, r4
 8002e10:	d10e      	bne.n	8002e30 <_malloc_r+0xcc>
 8002e12:	6032      	str	r2, [r6, #0]
 8002e14:	0028      	movs	r0, r5
 8002e16:	f000 f82d 	bl	8002e74 <__malloc_unlock>
 8002e1a:	0020      	movs	r0, r4
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	300b      	adds	r0, #11
 8002e20:	1d23      	adds	r3, r4, #4
 8002e22:	4390      	bics	r0, r2
 8002e24:	1ac2      	subs	r2, r0, r3
 8002e26:	4298      	cmp	r0, r3
 8002e28:	d0df      	beq.n	8002dea <_malloc_r+0x86>
 8002e2a:	1a1b      	subs	r3, r3, r0
 8002e2c:	50a3      	str	r3, [r4, r2]
 8002e2e:	e7dc      	b.n	8002dea <_malloc_r+0x86>
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	e7ef      	b.n	8002e14 <_malloc_r+0xb0>
 8002e34:	0023      	movs	r3, r4
 8002e36:	6864      	ldr	r4, [r4, #4]
 8002e38:	e7a6      	b.n	8002d88 <_malloc_r+0x24>
 8002e3a:	9c00      	ldr	r4, [sp, #0]
 8002e3c:	6863      	ldr	r3, [r4, #4]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	e7ad      	b.n	8002d9e <_malloc_r+0x3a>
 8002e42:	001a      	movs	r2, r3
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	42a3      	cmp	r3, r4
 8002e48:	d1fb      	bne.n	8002e42 <_malloc_r+0xde>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e7da      	b.n	8002e04 <_malloc_r+0xa0>
 8002e4e:	230c      	movs	r3, #12
 8002e50:	0028      	movs	r0, r5
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	f000 f80e 	bl	8002e74 <__malloc_unlock>
 8002e58:	e7c6      	b.n	8002de8 <_malloc_r+0x84>
 8002e5a:	6007      	str	r7, [r0, #0]
 8002e5c:	e7da      	b.n	8002e14 <_malloc_r+0xb0>
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	2000025c 	.word	0x2000025c

08002e64 <__malloc_lock>:
 8002e64:	b510      	push	{r4, lr}
 8002e66:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <__malloc_lock+0xc>)
 8002e68:	f7ff ff0d 	bl	8002c86 <__retarget_lock_acquire_recursive>
 8002e6c:	bd10      	pop	{r4, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	20000254 	.word	0x20000254

08002e74 <__malloc_unlock>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <__malloc_unlock+0xc>)
 8002e78:	f7ff ff06 	bl	8002c88 <__retarget_lock_release_recursive>
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	20000254 	.word	0x20000254

08002e84 <__sflush_r>:
 8002e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e86:	220c      	movs	r2, #12
 8002e88:	5e8b      	ldrsh	r3, [r1, r2]
 8002e8a:	0005      	movs	r5, r0
 8002e8c:	000c      	movs	r4, r1
 8002e8e:	071a      	lsls	r2, r3, #28
 8002e90:	d456      	bmi.n	8002f40 <__sflush_r+0xbc>
 8002e92:	684a      	ldr	r2, [r1, #4]
 8002e94:	2a00      	cmp	r2, #0
 8002e96:	dc02      	bgt.n	8002e9e <__sflush_r+0x1a>
 8002e98:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	dd4e      	ble.n	8002f3c <__sflush_r+0xb8>
 8002e9e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002ea0:	2f00      	cmp	r7, #0
 8002ea2:	d04b      	beq.n	8002f3c <__sflush_r+0xb8>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2080      	movs	r0, #128	@ 0x80
 8002ea8:	682e      	ldr	r6, [r5, #0]
 8002eaa:	602a      	str	r2, [r5, #0]
 8002eac:	001a      	movs	r2, r3
 8002eae:	0140      	lsls	r0, r0, #5
 8002eb0:	6a21      	ldr	r1, [r4, #32]
 8002eb2:	4002      	ands	r2, r0
 8002eb4:	4203      	tst	r3, r0
 8002eb6:	d033      	beq.n	8002f20 <__sflush_r+0x9c>
 8002eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	075b      	lsls	r3, r3, #29
 8002ebe:	d506      	bpl.n	8002ece <__sflush_r+0x4a>
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <__sflush_r+0x4a>
 8002eca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	2300      	movs	r3, #0
 8002ed0:	0028      	movs	r0, r5
 8002ed2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002ed4:	6a21      	ldr	r1, [r4, #32]
 8002ed6:	47b8      	blx	r7
 8002ed8:	89a2      	ldrh	r2, [r4, #12]
 8002eda:	1c43      	adds	r3, r0, #1
 8002edc:	d106      	bne.n	8002eec <__sflush_r+0x68>
 8002ede:	6829      	ldr	r1, [r5, #0]
 8002ee0:	291d      	cmp	r1, #29
 8002ee2:	d846      	bhi.n	8002f72 <__sflush_r+0xee>
 8002ee4:	4b29      	ldr	r3, [pc, #164]	@ (8002f8c <__sflush_r+0x108>)
 8002ee6:	410b      	asrs	r3, r1
 8002ee8:	07db      	lsls	r3, r3, #31
 8002eea:	d442      	bmi.n	8002f72 <__sflush_r+0xee>
 8002eec:	2300      	movs	r3, #0
 8002eee:	6063      	str	r3, [r4, #4]
 8002ef0:	6923      	ldr	r3, [r4, #16]
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	04d2      	lsls	r2, r2, #19
 8002ef6:	d505      	bpl.n	8002f04 <__sflush_r+0x80>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d102      	bne.n	8002f02 <__sflush_r+0x7e>
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d100      	bne.n	8002f04 <__sflush_r+0x80>
 8002f02:	6560      	str	r0, [r4, #84]	@ 0x54
 8002f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f06:	602e      	str	r6, [r5, #0]
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	d017      	beq.n	8002f3c <__sflush_r+0xb8>
 8002f0c:	0023      	movs	r3, r4
 8002f0e:	3344      	adds	r3, #68	@ 0x44
 8002f10:	4299      	cmp	r1, r3
 8002f12:	d002      	beq.n	8002f1a <__sflush_r+0x96>
 8002f14:	0028      	movs	r0, r5
 8002f16:	f7ff feb9 	bl	8002c8c <_free_r>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f1e:	e00d      	b.n	8002f3c <__sflush_r+0xb8>
 8002f20:	2301      	movs	r3, #1
 8002f22:	0028      	movs	r0, r5
 8002f24:	47b8      	blx	r7
 8002f26:	0002      	movs	r2, r0
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d1c6      	bne.n	8002eba <__sflush_r+0x36>
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0c3      	beq.n	8002eba <__sflush_r+0x36>
 8002f32:	2b1d      	cmp	r3, #29
 8002f34:	d001      	beq.n	8002f3a <__sflush_r+0xb6>
 8002f36:	2b16      	cmp	r3, #22
 8002f38:	d11a      	bne.n	8002f70 <__sflush_r+0xec>
 8002f3a:	602e      	str	r6, [r5, #0]
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	e01e      	b.n	8002f7e <__sflush_r+0xfa>
 8002f40:	690e      	ldr	r6, [r1, #16]
 8002f42:	2e00      	cmp	r6, #0
 8002f44:	d0fa      	beq.n	8002f3c <__sflush_r+0xb8>
 8002f46:	680f      	ldr	r7, [r1, #0]
 8002f48:	600e      	str	r6, [r1, #0]
 8002f4a:	1bba      	subs	r2, r7, r6
 8002f4c:	9201      	str	r2, [sp, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	079b      	lsls	r3, r3, #30
 8002f52:	d100      	bne.n	8002f56 <__sflush_r+0xd2>
 8002f54:	694a      	ldr	r2, [r1, #20]
 8002f56:	60a2      	str	r2, [r4, #8]
 8002f58:	9b01      	ldr	r3, [sp, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	ddee      	ble.n	8002f3c <__sflush_r+0xb8>
 8002f5e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f60:	0032      	movs	r2, r6
 8002f62:	001f      	movs	r7, r3
 8002f64:	0028      	movs	r0, r5
 8002f66:	9b01      	ldr	r3, [sp, #4]
 8002f68:	6a21      	ldr	r1, [r4, #32]
 8002f6a:	47b8      	blx	r7
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	dc07      	bgt.n	8002f80 <__sflush_r+0xfc>
 8002f70:	89a2      	ldrh	r2, [r4, #12]
 8002f72:	2340      	movs	r3, #64	@ 0x40
 8002f74:	2001      	movs	r0, #1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	b21b      	sxth	r3, r3
 8002f7a:	81a3      	strh	r3, [r4, #12]
 8002f7c:	4240      	negs	r0, r0
 8002f7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	1836      	adds	r6, r6, r0
 8002f84:	1a1b      	subs	r3, r3, r0
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	e7e6      	b.n	8002f58 <__sflush_r+0xd4>
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	dfbffffe 	.word	0xdfbffffe

08002f90 <_fflush_r>:
 8002f90:	690b      	ldr	r3, [r1, #16]
 8002f92:	b570      	push	{r4, r5, r6, lr}
 8002f94:	0005      	movs	r5, r0
 8002f96:	000c      	movs	r4, r1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_fflush_r+0x12>
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	0028      	movs	r0, r5
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	2800      	cmp	r0, #0
 8002fa4:	d004      	beq.n	8002fb0 <_fflush_r+0x20>
 8002fa6:	6a03      	ldr	r3, [r0, #32]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <_fflush_r+0x20>
 8002fac:	f7ff fc6a 	bl	8002884 <__sinit>
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	5ea3      	ldrsh	r3, [r4, r2]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f1      	beq.n	8002f9c <_fflush_r+0xc>
 8002fb8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fba:	07d2      	lsls	r2, r2, #31
 8002fbc:	d404      	bmi.n	8002fc8 <_fflush_r+0x38>
 8002fbe:	059b      	lsls	r3, r3, #22
 8002fc0:	d402      	bmi.n	8002fc8 <_fflush_r+0x38>
 8002fc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fc4:	f7ff fe5f 	bl	8002c86 <__retarget_lock_acquire_recursive>
 8002fc8:	0028      	movs	r0, r5
 8002fca:	0021      	movs	r1, r4
 8002fcc:	f7ff ff5a 	bl	8002e84 <__sflush_r>
 8002fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fd2:	0005      	movs	r5, r0
 8002fd4:	07db      	lsls	r3, r3, #31
 8002fd6:	d4e2      	bmi.n	8002f9e <_fflush_r+0xe>
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	059b      	lsls	r3, r3, #22
 8002fdc:	d4df      	bmi.n	8002f9e <_fflush_r+0xe>
 8002fde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fe0:	f7ff fe52 	bl	8002c88 <__retarget_lock_release_recursive>
 8002fe4:	e7db      	b.n	8002f9e <_fflush_r+0xe>
	...

08002fe8 <__swhatbuf_r>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	000e      	movs	r6, r1
 8002fec:	001d      	movs	r5, r3
 8002fee:	230e      	movs	r3, #14
 8002ff0:	5ec9      	ldrsh	r1, [r1, r3]
 8002ff2:	0014      	movs	r4, r2
 8002ff4:	b096      	sub	sp, #88	@ 0x58
 8002ff6:	2900      	cmp	r1, #0
 8002ff8:	da0c      	bge.n	8003014 <__swhatbuf_r+0x2c>
 8002ffa:	89b2      	ldrh	r2, [r6, #12]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	0011      	movs	r1, r2
 8003000:	4019      	ands	r1, r3
 8003002:	421a      	tst	r2, r3
 8003004:	d114      	bne.n	8003030 <__swhatbuf_r+0x48>
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	2000      	movs	r0, #0
 800300c:	6029      	str	r1, [r5, #0]
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	b016      	add	sp, #88	@ 0x58
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	466a      	mov	r2, sp
 8003016:	f000 f853 	bl	80030c0 <_fstat_r>
 800301a:	2800      	cmp	r0, #0
 800301c:	dbed      	blt.n	8002ffa <__swhatbuf_r+0x12>
 800301e:	23f0      	movs	r3, #240	@ 0xf0
 8003020:	9901      	ldr	r1, [sp, #4]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4019      	ands	r1, r3
 8003026:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <__swhatbuf_r+0x50>)
 8003028:	18c9      	adds	r1, r1, r3
 800302a:	424b      	negs	r3, r1
 800302c:	4159      	adcs	r1, r3
 800302e:	e7ea      	b.n	8003006 <__swhatbuf_r+0x1e>
 8003030:	2100      	movs	r1, #0
 8003032:	2340      	movs	r3, #64	@ 0x40
 8003034:	e7e9      	b.n	800300a <__swhatbuf_r+0x22>
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	ffffe000 	.word	0xffffe000

0800303c <__smakebuf_r>:
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	2602      	movs	r6, #2
 8003040:	898b      	ldrh	r3, [r1, #12]
 8003042:	0005      	movs	r5, r0
 8003044:	000c      	movs	r4, r1
 8003046:	b085      	sub	sp, #20
 8003048:	4233      	tst	r3, r6
 800304a:	d007      	beq.n	800305c <__smakebuf_r+0x20>
 800304c:	0023      	movs	r3, r4
 800304e:	3347      	adds	r3, #71	@ 0x47
 8003050:	6023      	str	r3, [r4, #0]
 8003052:	6123      	str	r3, [r4, #16]
 8003054:	2301      	movs	r3, #1
 8003056:	6163      	str	r3, [r4, #20]
 8003058:	b005      	add	sp, #20
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305c:	ab03      	add	r3, sp, #12
 800305e:	aa02      	add	r2, sp, #8
 8003060:	f7ff ffc2 	bl	8002fe8 <__swhatbuf_r>
 8003064:	9f02      	ldr	r7, [sp, #8]
 8003066:	9001      	str	r0, [sp, #4]
 8003068:	0039      	movs	r1, r7
 800306a:	0028      	movs	r0, r5
 800306c:	f7ff fe7a 	bl	8002d64 <_malloc_r>
 8003070:	2800      	cmp	r0, #0
 8003072:	d108      	bne.n	8003086 <__smakebuf_r+0x4a>
 8003074:	220c      	movs	r2, #12
 8003076:	5ea3      	ldrsh	r3, [r4, r2]
 8003078:	059a      	lsls	r2, r3, #22
 800307a:	d4ed      	bmi.n	8003058 <__smakebuf_r+0x1c>
 800307c:	2203      	movs	r2, #3
 800307e:	4393      	bics	r3, r2
 8003080:	431e      	orrs	r6, r3
 8003082:	81a6      	strh	r6, [r4, #12]
 8003084:	e7e2      	b.n	800304c <__smakebuf_r+0x10>
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	89a2      	ldrh	r2, [r4, #12]
 800308a:	6020      	str	r0, [r4, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	81a3      	strh	r3, [r4, #12]
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	6120      	str	r0, [r4, #16]
 8003094:	6167      	str	r7, [r4, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <__smakebuf_r+0x78>
 800309a:	0028      	movs	r0, r5
 800309c:	230e      	movs	r3, #14
 800309e:	5ee1      	ldrsh	r1, [r4, r3]
 80030a0:	f000 f820 	bl	80030e4 <_isatty_r>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d005      	beq.n	80030b4 <__smakebuf_r+0x78>
 80030a8:	2303      	movs	r3, #3
 80030aa:	89a2      	ldrh	r2, [r4, #12]
 80030ac:	439a      	bics	r2, r3
 80030ae:	3b02      	subs	r3, #2
 80030b0:	4313      	orrs	r3, r2
 80030b2:	81a3      	strh	r3, [r4, #12]
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	9a01      	ldr	r2, [sp, #4]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	e7cc      	b.n	8003058 <__smakebuf_r+0x1c>
	...

080030c0 <_fstat_r>:
 80030c0:	2300      	movs	r3, #0
 80030c2:	b570      	push	{r4, r5, r6, lr}
 80030c4:	4d06      	ldr	r5, [pc, #24]	@ (80030e0 <_fstat_r+0x20>)
 80030c6:	0004      	movs	r4, r0
 80030c8:	0008      	movs	r0, r1
 80030ca:	0011      	movs	r1, r2
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	f7fd fbb9 	bl	8000844 <_fstat>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	d103      	bne.n	80030de <_fstat_r+0x1e>
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d000      	beq.n	80030de <_fstat_r+0x1e>
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	20000250 	.word	0x20000250

080030e4 <_isatty_r>:
 80030e4:	2300      	movs	r3, #0
 80030e6:	b570      	push	{r4, r5, r6, lr}
 80030e8:	4d06      	ldr	r5, [pc, #24]	@ (8003104 <_isatty_r+0x20>)
 80030ea:	0004      	movs	r4, r0
 80030ec:	0008      	movs	r0, r1
 80030ee:	602b      	str	r3, [r5, #0]
 80030f0:	f7fd fbb6 	bl	8000860 <_isatty>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d103      	bne.n	8003100 <_isatty_r+0x1c>
 80030f8:	682b      	ldr	r3, [r5, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d000      	beq.n	8003100 <_isatty_r+0x1c>
 80030fe:	6023      	str	r3, [r4, #0]
 8003100:	bd70      	pop	{r4, r5, r6, pc}
 8003102:	46c0      	nop			@ (mov r8, r8)
 8003104:	20000250 	.word	0x20000250

08003108 <_sbrk_r>:
 8003108:	2300      	movs	r3, #0
 800310a:	b570      	push	{r4, r5, r6, lr}
 800310c:	4d06      	ldr	r5, [pc, #24]	@ (8003128 <_sbrk_r+0x20>)
 800310e:	0004      	movs	r4, r0
 8003110:	0008      	movs	r0, r1
 8003112:	602b      	str	r3, [r5, #0]
 8003114:	f7fd fbb8 	bl	8000888 <_sbrk>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d103      	bne.n	8003124 <_sbrk_r+0x1c>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d000      	beq.n	8003124 <_sbrk_r+0x1c>
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	bd70      	pop	{r4, r5, r6, pc}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	20000250 	.word	0x20000250

0800312c <_init>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003132:	bc08      	pop	{r3}
 8003134:	469e      	mov	lr, r3
 8003136:	4770      	bx	lr

08003138 <_fini>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr
